# vi: set ft = ini.jinja :

{% set roles = [] -%}
{% do  roles.append('keystone') -%}
{% do  roles.append('mariadb-server') -%}
{% do  roles.append('memcached') -%}
{% do  roles.append('mysql-server') -%}
{% do  roles.append('nova-api') -%}
{% do  roles.append('postgresql') -%}
{% do  roles.append('qpidd') -%}
{% do  roles.append('rabbitmq-server') -%}
{% do  roles.append('redis-server') -%}
{% set minions = salt['roles.dict'](roles) -%}

[DEFAULT]
{#
#-------------------------------------------------------------------------------
# API
#-------------------------------------------------------------------------------
# allow_bulk                                     = True
# allow_pagination                               = False
# allow_sorting                                  = False
# api_extensions_path                            =
# api_paste_config                               = api-paste.ini
# max_header_line                                = 16384
# pagination_max_limit                           = -1
# service_plugins                                =
-#}
#-------------------------------------------------------------------------------
# Common
#-------------------------------------------------------------------------------
{% if minions['keystone'] -%}
auth_strategy                                    = keystone
{% else -%}
auth_strategy                                    = noauth
{% endif -%}
core_plugin                                      = neutron.plugins.ml2.plugin.Ml2Plugin
host                                             = {{ salt['config.get']('fqdn') }}
lock_path                                        = $state_path/lock
state_path                                       = /var/lib/neutron
{#
# agent_down_time                                = 75
# api_workers                                    = 0
# base_mac                                       = fa:16:3e:4f:00:00
# bind_host                                      = 0.0.0.0
# bind_port                                      = 9696
# mac_generation_retries                         = 16
# dhcp_agent_notification                        = True
# dhcp_agents_per_network                        = 1
# dhcp_lease_duration                            = 86400
# force_gateway_on_subnet                        = False
# max_dns_nameservers                            = 5
# max_fixed_ips_per_port                         = 5
# max_subnet_host_routes                         = 20
# rpc_workers                                    = 0
-#}
#-------------------------------------------------------------------------------
# Compute
#-------------------------------------------------------------------------------
{% if minions['keystone'] -%}
nova_admin_auth_url                              = http://{{ minions['keystone'][0] }}:5000/v2.0
{% endif -%}
{% if minions['nova-api'] -%}
nova_url                                         = http://{{ minions['nova-api'][0] }}:8774
{% endif -%}
{#
# notify_nova_on_port_data_changes               = True
# notify_nova_on_port_status_changes             = True
# nova_admin_password                            =
# nova_admin_tenant_id                           =
# nova_admin_username                            =
# nova_region_name                               =
# send_events_interval                           = 2
-#}
{#
#-------------------------------------------------------------------------------
# Logging
#-------------------------------------------------------------------------------
# debug                                          = False
# default_log_levels                             = amqp=WARN,amqplib=WARN,boto=WARN,qpid=WARN,sqlalchemy=WARN,suds=INFO,iso8601=WARN
# default_notification_level                     = INFO
# fatal_deprecations                             = False
# instance_format                                = "[instance: %(uuid)s] "
# instance_uuid_format                           = "[instance: %(uuid)s] "
# log_config_append                              = <None>
# log_date_format                                = %Y-%m-%d %H:%M:%S
# log_dir                                        =
# log_file                                       =
# logging_context_format_string                  = %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [%(request_id)s %(user_identity)s] %(instance)s %(message)s
# logging_debug_format_suffix                    = %(funcName)s %(pathname)s:%(lineno)d
# logging_default_format_string                  = %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [-] %(instance)s %(message)s
# logging_exception_prefix                       = %(asctime)s.%(msecs)03d %(process)d TRACE %(name)s %(instance)s
# publish_errors                                 = False
# syslog_log_facility                            = LOG_USER
# use_ssl                                        = False
# use_stderr                                     = True
# use_syslog                                     = False
# verbose                                        = False
-#}
{#
#-------------------------------------------------------------------------------
# Policy
#-------------------------------------------------------------------------------
# allow_overlapping_ips                          = False
# policy_file                                    = policy.json
-#}
{#
#-------------------------------------------------------------------------------
# Quotas
#-------------------------------------------------------------------------------
# max_routes                                     = 30
-#}
#-------------------------------------------------------------------------------
# RPC
#-------------------------------------------------------------------------------
{% if   minions['rabbitmq-server'] -%}
rpc_backend                                      = neutron.openstack.common.rpc.impl_kombu
notification_driver                              = rabbit
notification_driver                              = neutron.openstack.common.notifier.rpc_notifier
{% elif minions['qpidd'] -%}
rpc_backend                                      = neutron.openstack.common.rpc.impl_qpid
notification_driver                              = qpid
{% else -%}
rpc_backend                                      = neutron.openstack.common.rpc.impl_zmq
notification_driver                              = noop
{% endif -%}
{#
# amqp_auto_delete                               = False
# amqp_durable_queues                            = False
# control_exchange                               = openstack
# default_publisher_id                           = $host
# kombu_reconnect_delay                          = 1.0
# kombu_ssl_ca_certs                             =
# kombu_ssl_certfile                             =
# kombu_ssl_keyfile                              =
# kombu_ssl_version                              =
# matchmaker_heartbeat_freq                      = 300
# matchmaker_heartbeat_ttl                       = 600
# notification_driver                            = neutron.openstack.common.notifier.log_notifier
# notification_driver                            = neutron.openstack.common.notifier.no_op_notifier
# notification_topics                            = notifications
# rpc_cast_timeout                               = 30
# rpc_conn_pool_size                             = 30
# rpc_response_timeout                           = 60
# rpc_thread_pool_size                           = 64
-#}
{% if   minions['rabbitmq-server'] -%}
#-------------------------------------------------------------------------------
# RPC: RabbitMQ
#-------------------------------------------------------------------------------
{% if   minions['rabbitmq-server']|count > 1 -%}
{% set socks = [] -%}
{% for minion in minions['rabbitmq-server'] -%}
{% do  socks.append(minion + ':5672') -%}
{% endfor -%}
rabbit_hosts                                     = {{ socks|join(',') }}
{% else -%}
rabbit_host                                      = {{ minions['rabbitmq-server'][0] }}
{% endif -%}
rabbit_password                                  = neutron
rabbit_userid                                    = neutron
rabbit_virtual_host                              = /neutron
# rabbit_ha_queues                               = False
# rabbit_login_method                            = AMQPLAIN
# rabbit_max_retries                             = 0
# rabbit_port                                    = 5672
# rabbit_retry_backoff                           = 2
# rabbit_retry_interval                          = 1
# rabbit_use_ssl                                 = False
{% elif minions['qpidd'] -%}
#-------------------------------------------------------------------------------
# RPC: Qpidd
#-------------------------------------------------------------------------------
{% if   minions['qpidd']|count > 1 -%}
{% set socks = [] -%}
{% for minion in minions['qpidd'] -%}
{% do  socks.append(minion + ':5672') -%}
{% endfor -%}
qpid_hosts                                       = {{ socks|join(',') }}
{% else -%}
qpid_hostname                                    = {{ minions['qpidd'][0] }}
{% endif -%}
# qpid_heartbeat                                 = 60
# qpid_password                                  =
# qpid_port                                      = 5672
# qpid_protocol                                  = tcp
# qpid_sasl_mechanisms                           =
# qpid_tcp_nodelay                               = True
# qpid_topology_version                          = 1
# qpid_username                                  =
{% else -%}
#-------------------------------------------------------------------------------
# RPC: ZeroMQ
#-------------------------------------------------------------------------------
rpc_zmq_host                                     = {{ salt['config.get']('fqdn') }}
# rpc_zmq_bind_address                           = *
# rpc_zmq_contexts                               = 1
# rpc_zmq_ipc_dir                                = /var/run/openstack
# rpc_zmq_matchmaker                             = oslo.messaging._drivers.matchmaker.MatchMakerLocalhost
# rpc_zmq_port                                   = 9501
# rpc_zmq_topic_backlog                          = <None>
{% endif -%}
{#
#-------------------------------------------------------------------------------
# Scheduler
#-------------------------------------------------------------------------------
# loadbalancer_pool_scheduler_driver             = neutron.services.loadbalancer.agent_scheduler.ChanceScheduler
# network_auto_schedule                          = True
# network_scheduler_driver                       = neutron.scheduler.dhcp_agent_scheduler.ChanceScheduler
# router_auto_schedule                           = True
# router_scheduler_driver                        = neutron.scheduler.l3_agent_scheduler.ChanceScheduler
-#}
{#
#-------------------------------------------------------------------------------
# SSL
#-------------------------------------------------------------------------------
# ssl_ca_file                                    = /path/to/cafile
# ssl_cert_file                                  = /path/to/certfile
# ssl_key_file                                   = /path/to/keyfile
-#}
{#
#-------------------------------------------------------------------------------
# WSGI
#-------------------------------------------------------------------------------
# backlog                                        = 4096
# retry_until_window                             = 30
# tcp_keepidle                                   = 600
-#}

[agent]
root_helper                                      = sudo /usr/bin/neutron-rootwrap /etc/neutron/rootwrap.conf
{#
# report_interval                                = 30
-#}

[database]
{% set  connection = {} -%}
{% if   minions['mysql-server'] -%}
{% do   connection.update({'type': 'mysql'}) -%}
{% elif minions['postgresql'] -%}
{% do   connection.update({'type': 'postgresql'}) -%}
{% else -%}
{% do   connection.update({'type': 'sqlite'}) -%}
{% endif -%}
{% if minions['mariadb-server']
   or minions['mysql-server']
   or minions['postgresql'] -%}
connection                                       = {{ connection.type }}://{{ connection.username }}:{{ connection.password }}@{{ connection.hostname }}/{{ connection.database }}{% if connection.database_ssl_ca %}?ssl_ca={{ connection.database_ssl_ca }}{% if connection.database_ssl_cert %}&ssl_cert={{ database_ssl_cert }}&ssl_key={{ connection.database_ssl_key }}{% endif %}{% endif %}
{% else -%}
connection                                       = sqlite:////var/lib/neutron/neutron.sqlite
{% endif -%}
{#
# backend                                        = sqlalchemy
# connection_debug                               = 0
# connection_trace                               = False
# db_inc_retry_interval                          = True
# db_max_retries                                 = 20
# db_max_retry_interval                          = 10
# db_retry_interval                              = 1
# idle_timeout                                   = 3600
# max_overflow                                   = 20
# max_pool_size                                  = 10
# max_retries                                    = 10
# min_pool_size                                  = 1
# pool_timeout                                   = 10
# retry_interval                                 = 10
# slave_connection                               =
# use_db_reconnect                               = False
-#}

[keystone_authtoken]
{% if minions['keystone'] -%}
auth_uri                                         = http://{{ minions['keystone'][0] }}:5000/
{% endif -%}
{% if minions['memcached'] -%}
memcached_servers                                = {{ minions['memcached']|join(',') }}
{% endif -%}
{#
# admin_password                                 = <None>
# admin_tenant_name                              = admin
# admin_token                                    = <None>
# admin_user                                     = <None>
# auth_admin_prefix                              =
# auth_host                                      = 127.0.0.1
# auth_port                                      = 35357
# auth_protocol                                  = https
# auth_version                                   = <None>
# cache                                          = <None>
# cafile                                         = <None>
# certfile                                       = <None>
# delay_auth_decision                            = False
# enforce_token_bind                             = permissive
# http_connect_timeout                           = <None>
# http_request_max_retries                       = 3
# include_service_catalog                        = True
# insecure                                       = False
# keyfile                                        = <None>
# memcache_secret_key                            = <None>
# memcache_security_strategy                     = <None>
# revocation_cache_time                          = 300
# signing_dir                                    = <None>
# token_cache_time                               = 300
-#}

[matchmaker_redis]
{% if minions['redis-server'] -%}
host                                             = {{ minions['redis-server'][0] }}
# password                                       = <None>
# port                                           = 6379
{% endif -%}

[matchmaker_ring]
{#
# ringfile                                       = /etc/oslo/matchmaker_ring.json
-#}

[quotas]
{#
# default_quota                                  = -1
# quota_driver                                   = neutron.db.quota_db.DbQuotaDriver
# quota_firewall                                 = 1
# quota_firewall_policy                          = 1
# quota_firewall_rule                            = -1
# quota_floatingip                               = 50
# quota_health_monitor                           = -1
# quota_items                                    = network,subnet,port
# quota_member                                   = -1
# quota_network                                  = 10
# quota_network_gateway                          = 5
# quota_packet_filter                            = 100
# quota_pool                                     = 10
# quota_port                                     = 50
# quota_router                                   = 10
# quota_security_group                           = 10
# quota_security_group_rule                      = 100
# quota_subnet                                   = 10
# quota_vip                                      = 10
-#}

[service_providers]
service_provider                                 = LOADBALANCER:Haproxy:neutron.services.loadbalancer.drivers.haproxy.plugin_driver.HaproxyOnHostPluginDriver:default
service_provider                                 = VPN:openswan:neutron.services.vpn.service_drivers.ipsec.IPsecVPNDriver:default
{#
# service_provider                               = LOADBALANCER:Embrane:neutron.services.loadbalancer.drivers.embrane.driver.EmbraneLbaas:default
# service_provider                               = LOADBALANCER:Radware:neutron.services.loadbalancer.drivers.radware.driver.LoadBalancerDriver:default
# service_provider                               = LOADBALANCER:NetScaler:neutron.services.loadbalancer.drivers.netscaler.netscaler_driver.NetScalerPluginDriver
# service_provider                               = VPN:cisco:neutron.services.vpn.service_drivers.cisco_ipsec.CiscoCsrIPsecVPNDriver:default
-#}
