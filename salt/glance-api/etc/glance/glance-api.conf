# vi: set ft = ini.jinja :

{% set roles = [] -%}
{% do  roles.append('cinder-volume') -%}
{% do  roles.append('glance-registry') -%}
{% do  roles.append('keystone') -%}
{% do  roles.append('mariadb-server') -%}
{% do  roles.append('memcached') -%}
{% do  roles.append('mongodb-server') -%}
{% do  roles.append('mysql-server') -%}
{% do  roles.append('nova-objectstore') -%}
{% do  roles.append('postgresql') -%}
{% do  roles.append('qpidd') -%}
{% do  roles.append('radosgw') -%}
{% do  roles.append('rabbitmq-server') -%}
{% do  roles.append('redis-server') -%}
{% do  roles.append('sheepdog') -%}
{% do  roles.append('swift-object') -%}
{% do  roles.append('swift-proxy') -%}
{% set minions = salt['roles.dict'](roles) -%}
{% set store = [] -%}
{% do  store.append('glance.store.filesystem.Store') -%}
{% do  store.append('glance.store.http.Store') -%}
{% if  minions['radosgw'] -%}
{% do  store.append('glance.store.rbd.Store') -%}
{% endif -%}
{% if  minions['cinder-volume'] -%}
{% do  store.append('glance.store.cinder.Store') -%}
{% endif -%}
{% if  minions['nova-objectstore'] -%}
{% do  store.append('glance.store.s3.Store') -%}
{% endif -%}
{% if  minions['sheepdog'] -%}
{% do  store.append('glance.store.sheepdog.Store') -%}
{% endif -%}
{% if  minions['swift-object'] -%}
{% do  store.append('glance.store.swift.Store') -%}
{% endif -%}

[DEFAULT]
#-------------------------------------------------------------------------------
# API
#-------------------------------------------------------------------------------
{% if   'glance.store.rbd.Store'    in store -%}
default_store                                    = rbd
{% elif 'glance.store.swift.Store'  in store -%}
default_store                                    = swift
{% elif 'glance.store.cinder.Store' in store -%}
default_store                                    = cinder
{% else -%}
default_store                                    = file
{% endif -%}
known_stores                                     = {{ store|sort|join(', ') }}
{#
# admin_role                                     = admin
# allow_anonymous_access                         = False
# enable_v1_api                                  = True
# enable_v2_api                                  = True
# image_size_cap                                 = 1099511627776
# location_strategy                              = location_order
# send_identity_headers                          = False
# use_user_token                                 = True
###
###
###
###
-#}
#-------------------------------------------------------------------------------
# Cache
#-------------------------------------------------------------------------------
delayed_delete                                   = False
image_cache_dir                                  = /var/lib/glance/image-cache/
scrub_time                                       = 43200
scrubber_datadir                                 = /var/lib/glance/scrubber
{#
###
###
###
###
###
###
-#}
#-------------------------------------------------------------------------------
# Common
#-------------------------------------------------------------------------------
backlog                                          = 4096
bind_host                                        = 0.0.0.0
bind_port                                        = 9292
workers                                          = {{ salt['config.get']('num_cpus') }}
{#
# data_api                                       = glance.db.sqlalchemy.api
# image_location_quota                           = 10
# image_member_quota                             = 128
# image_property_quota                           = 128
# image_tag_quota                                = 128
# lock_path                                      = <None>
# metadata_encryption_key                        = <16, 24 or 32 char registry metadata key>
# notifier_strategy                              = default
# os_region_name                                 = <None>
# property_protection_file                       =
# property_protection_rule_format                = roles
# show_image_direct_url                          = False
# user_storage_quota                             = 0
###
###
###
###
-#}
{#
#-------------------------------------------------------------------------------
# Database
#-------------------------------------------------------------------------------
# db_auto_create                                 = False
# db_enforce_mysql_charset                       = True
# sqlalchemy_debug                               = True
-#}
#-------------------------------------------------------------------------------
# Logging
#-------------------------------------------------------------------------------
log_file                                         = /var/log/glance/api.log
{#
# debug                                          = False
# default_log_levels                             = amqp=WARN,amqplib=WARN,boto=WARN,qpid=WARN,sqlalchemy=WARN,suds=INFO,iso8601=WARN,requests.packages.urllib3.connectionpool=WARN
# fatal_deprecations                             = False
# instance_format                                = "[instance: %(uuid)s] "
# instance_uuid_format                           = "[instance: %(uuid)s] "
# log_config_append                              = <None>
# log_date_format                                = %Y-%m-%d %H:%M:%S
# log_dir                                        = <None>
# logging_context_format_string                  = %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [%(request_id)s %(user_identity)s] %(instance)s %(message)s
# logging_debug_format_suffix                    = %(funcName)s %(pathname)s:%(lineno)d
# logging_default_format_string                  = %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [-] %(instance)s %(message)s
# logging_exception_prefix                       = %(asctime)s.%(msecs)03d %(process)d TRACE %(name)s %(instance)s
# publish_errors                                 = False
# syslog_log_facility                            = LOG_LOCAL0
# use_stderr                                     = True
# use_syslog                                     = False
# use_syslog_rfc_format                          = False
# verbose                                        = False
-#}
{#
#-------------------------------------------------------------------------------
# Policy
#-------------------------------------------------------------------------------
# policy_default_rule                            = default
# policy_file                                    = policy.json
-#}
#-------------------------------------------------------------------------------
# Registry
#-------------------------------------------------------------------------------
{% if minions['keystone'] -%}
auth_strategy                                    = keystone
{% else -%}
auth_strategy                                    = noauth
{% endif -%}
registry_client_protocol                         = http
registry_host                                    = {{ minions['glance-registry'][0]|default('0.0.0.0') }}
registry_port                                    = 9191
{#
# admin_password                                 = <None>
# admin_tenant_name                              = <None>
# admin_user                                     = <None>
# auth_url                                       = <None>
# auth_region                                    = <None>
# registry_client_ca_file                        = /path/to/ca/file
# registry_client_cert_file                      = /path/to/cert/file
# registry_client_insecure                       = False
# registry_client_key_file                       = /path/to/key/file
# registry_client_timeout                        = 600
-#}
#-------------------------------------------------------------------------------
# RPC
#-------------------------------------------------------------------------------
{% if   minions['rabbitmq-server'] -%}
rpc_backend                                      = rabbit
notification_driver                              = rabbit
{% elif minions['qpidd'] -%}
rpc_backend                                      = qpid
notification_driver                              = qpid
{% else -%}
rpc_backend                                      = zmq
notification_driver                              = noop
{% endif -%}
{#
# amqp_auto_delete                               = False
# amqp_durable_queues                            = False
# control_exchange                               = openstack
# default_publisher_id                           = image.localhost
# kombu_reconnect_delay                          = 1.0
# kombu_ssl_ca_certs                             =
# kombu_ssl_certfile                             =
# kombu_ssl_keyfile                              =
# kombu_ssl_version                              =
# matchmaker_heartbeat_freq                      = 300
# matchmaker_heartbeat_ttl                       = 600
# notification_topics                            = notifications
# onready                                        = <None>
# publish_errors                                 = False
# rpc_cast_timeout                               = 30
# rpc_conn_pool_size                             = 30
# rpc_response_timeout                           = 60
# rpc_thread_pool_size                           = 64
-#}
{% if   minions['rabbitmq-server'] -%}
#-------------------------------------------------------------------------------
# RPC: RabbitMQ
#-------------------------------------------------------------------------------
{% if   minions['rabbitmq-server']|count > 1 -%}
{% set socks = [] -%}
{% for minion in minions['rabbitmq-server'] -%}
{% do  socks.append(minion + ':5672') -%}
{% endfor -%}
rabbit_hosts                                     = {{ socks|join(',') }}
{% else -%}
rabbit_host                                      = {{ minions['rabbitmq-server'][0] }}
{% endif -%}
rabbit_password                                  = glance
rabbit_userid                                    = glance
rabbit_virtual_host                              = /glance
# rabbit_ha_queues                               = False
# rabbit_login_method                            = AMQPLAIN
# rabbit_max_retries                             = 0
# rabbit_port                                    = 5672
# rabbit_retry_backoff                           = 2
# rabbit_retry_interval                          = 1
# rabbit_use_ssl                                 = False
{% elif minions['qpidd'] -%}
#-------------------------------------------------------------------------------
# RPC: Qpidd
#-------------------------------------------------------------------------------
{% if   minions['qpidd']|count > 1 -%}
{% set socks = [] -%}
{% for minion in minions['qpidd'] -%}
{% do  socks.append(minion + ':5672') -%}
{% endfor -%}
qpid_hosts                                       = {{ socks|join(',') }}
{% else -%}
qpid_hostname                                    = {{ minions['qpidd'][0] }}
{% endif -%}
# qpid_heartbeat                                 = 60
# qpid_password                                  =
# qpid_port                                      = 5672
# qpid_protocol                                  = tcp
# qpid_sasl_mechanisms                           =
# qpid_tcp_nodelay                               = True
# qpid_topology_version                          = 1
# qpid_username                                  =
{% else -%}
#-------------------------------------------------------------------------------
# RPC: ZeroMQ
#-------------------------------------------------------------------------------
rpc_zmq_host                                     = {{ salt['config.get']('fqdn') }}
# rpc_zmq_bind_address                           = *
# rpc_zmq_contexts                               = 1
# rpc_zmq_ipc_dir                                = /var/run/openstack
# rpc_zmq_matchmaker                             = oslo.messaging._drivers.matchmaker.MatchMakerLocalhost
# rpc_zmq_port                                   = 9501
# rpc_zmq_topic_backlog                          = <None>
{% endif -%}
{#
#-------------------------------------------------------------------------------
# SSL
#-------------------------------------------------------------------------------
# ca_file                                        = /path/to/cafile
# cert_file                                      = /path/to/certfile
# key_file                                       = /path/to/keyfile
-#}
{% if  minions['nova-objectstore']
   and minions['swift-proxy'] -%}
#-------------------------------------------------------------------------------
# Storage: Amazon Web Services (AWS) Simple Storage Service (S3)
#-------------------------------------------------------------------------------
s3_store_access_key                              = <20-char AWS access key>
s3_store_create_bucket_on_put                    = False
s3_store_bucket                                  = <lowercased 20-char aws access key>glance
s3_store_host                                    = {{ minions['swift-proxy'][0] }}:8080/v1.0/
s3_store_secret_key                              = <40-char AWS secret key>
# s3_store_bucket_url_format                     = subdomain
# s3_store_object_buffer_dir                     = /path/to/dir
{% endif -%}
{% if minions['radosgw'] -%}
#-------------------------------------------------------------------------------
# Storage: Ceph
#-------------------------------------------------------------------------------
# rbd_store_ceph_conf                            = /etc/ceph/ceph.conf
# rbd_store_chunk_size                           = 8
# rbd_store_pool                                 = images
# rbd_store_user                                 = <None>
{% endif -%}
{% if minions['cinder-volume'] -%}
#-------------------------------------------------------------------------------
# Storage: Cinder
#-------------------------------------------------------------------------------
# cinder_api_insecure                            = False
# cinder_catalog_info                            = volume:cinder:publicURL
# cinder_ca_certificates_file                    = <None>
# cinder_endpoint_template                       = <None>
# cinder_http_retries                            = 3
{% endif -%}
#-------------------------------------------------------------------------------
# Storage: Filesystem
#-------------------------------------------------------------------------------
filesystem_store_datadir                         = /var/lib/glance/images/
# filesystem_store_datadirs                      = /var/lib/glance/images/:1
# filesystem_store_metadata_file                 = <None>
{% if minions['mongodb-server'] -%}
#-------------------------------------------------------------------------------
# Storage: MongoDB GridFS
#-------------------------------------------------------------------------------
# mongodb_store_db                               = <None>
# mongodb_store_uri                              = <None>
{% endif -%}
{% if minions['sheepdog'] -%}
#-------------------------------------------------------------------------------
# Storage: Sheepdog
#-------------------------------------------------------------------------------
sheepdog_store_address                           = {{ minions['sheepdog'][0] }}
sheepdog_store_chunk_size                        = 64
sheepdog_store_port                              = 7000
{% endif -%}
{% if  minions['keystone']
   and minions['swift-object'] -%}
#-------------------------------------------------------------------------------
# Storage: Swift
#-------------------------------------------------------------------------------
swift_enable_snet                                = False
swift_store_auth_address                         = {{ minions['keystone'][0] }}:5000/v2.0/
swift_store_auth_version                         = 2
swift_store_container                            = glance
swift_store_create_container_on_put              = False
swift_store_key                                  = a86850deb2742ec3cb41518e26aa2d89
swift_store_large_object_size                    = 5120
swift_store_large_object_chunk_size              = 200
swift_store_user                                 = jdoe:jdoe
# swift_store_admin_tenants                      =
# swift_store_multi_tenant                       = False
# swift_store_region                             =
# swift_store_retry_get_count                    = 0
# swift_store_ssl_compression                    = True
{% endif -%}
{#
#-------------------------------------------------------------------------------
# Storage: VMware
#-------------------------------------------------------------------------------
# vmware_api_insecure                            = False
# vmware_api_retry_count                         = 10
# vmware_datacenter_path                         = <None>
# vmware_datastore_name                          = <None>
# vmware_pbm_policy                              =
# vmware_pbm_wsdl_location                       =
# vmware_server_host                             = <None>
# vmware_server_password                         = <None>
# vmware_server_username                         = <None>
# vmware_store_image_dir                         = /openstack_glance
# vmware_task_poll_interval                      = 5
-#}
{#
#-------------------------------------------------------------------------------
# WSGI
#-------------------------------------------------------------------------------
# max_header_line                                = 16384
# tcp_keepidle                                   = 600
###
###
-#}

[database]
backend                                          = sqlalchemy
{% set  connection = {} -%}
{% if   minions['mysql-server'] -%}
{% do   connection.update({'type': 'mysql'}) -%}
# mysql_sql_mode                                 = TRADITIONAL
{% elif minions['postgresql'] -%}
{% do   connection.update({'type': 'postgresql'}) -%}
{% else -%}
{% do   connection.update({'type': 'sqlite'}) -%}
{% endif -%}
{% if minions['mariadb-server']
   or minions['mysql-server']
   or minions['postgresql'] -%}
connection                                       = {{ connection.type }}://{{ connection.username }}:{{ connection.password }}@{{ connection.hostname }}/{{ connection.database }}{% if connection.database_ssl_ca %}?ssl_ca={{ connection.database_ssl_ca }}{% if connection.database_ssl_cert %}&ssl_cert={{ database_ssl_cert }}&ssl_key={{ connection.database_ssl_key }}{% endif %}{% endif %}
{% else -%}
connection                                       = sqlite:///$state_path/$sqlite_db
sqlite_db                                        = /var/lib/glance/glance.sqlite
# sqlite_synchronous                             = True
{% endif -%}
{#
# connection_debug                               = 0
# connection_trace                               = False
# db_inc_retry_interval                          = True
# db_max_retries                                 = 20
# db_max_retry_interval                          = 10
# db_retry_interval                              = 1
# idle_timeout                                   = 3600
# max_overflow                                   = <None>
# max_pool_size                                  = <None>
# max_retries                                    = 10
# min_pool_size                                  = 1
# pool_timeout                                   = <None>
# retry_interval                                 = 10
# use_db_reconnect                               = False
-#}

[image_format]
container_formats                                = ami,ari,aki,bare,ovf,ova,docker
{#
# disk_formats                                   = ami,ari,aki,vhd,vmdk,raw,qcow2,vdi,iso
-#}

[keystone_authtoken]
{% if minions['keystone'] -%}
auth_uri                                         = http://{{ minions['keystone'][0] }}:5000/
{% endif -%}
{% if minions['memcached'] -%}
memcached_servers                                = {{ minions['memcached']|join(',') }}
{% endif -%}
{#
# admin_password                                 = <None>
# admin_tenant_name                              = admin
# admin_token                                    = <None>
# admin_user                                     = <None>
# auth_admin_prefix                              =
# auth_host                                      = 127.0.0.1
# auth_port                                      = 35357
# auth_protocol                                  = https
# auth_version                                   = <None>
# cache                                          = <None>
# cafile                                         = <None>
# certfile                                       = <None>
# delay_auth_decision                            = False
# enforce_token_bind                             = permissive
# http_connect_timeout                           = <None>
# http_request_max_retries                       = 3
# identity_uri                                   = <None>
# include_service_catalog                        = True
# insecure                                       = False
# keyfile                                        = <None>
# memcache_secret_key                            = <None>
# memcache_security_strategy                     = <None>
# revocation_cache_time                          = 300
# signing_dir                                    = <None>
# token_cache_time                               = 300
-#}

[matchmaker_redis]
{% if minions['redis-server'] -%}
host                                             = {{ minions['redis-server'][0] }}
# password                                       = <None>
# port                                           = 6379
{% endif -%}

[matchmaker_ring]
{#
# ringfile                                       = /etc/oslo/matchmaker_ring.json
-#}

[paste_deploy]
{#
# config_file                                    = glance-api-paste.ini
# flavor                                         =
-#}

[store_type_location_strategy]
{#
# store_type_preference                          =
-#}

[task]
{#
# task_time_to_live                              = 48
-#}
