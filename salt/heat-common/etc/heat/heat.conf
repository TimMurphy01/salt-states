#  vi: set ft=ini.jinja :

{% set roles = [] -%}
{% do  roles.append('keystone') -%}
{% do  roles.append('mariadb-server') -%}
{% do  roles.append('memcached') -%}
{% do  roles.append('mysql-server') -%}
{% do  roles.append('postgresql') -%}
{% do  roles.append('qpidd') -%}
{% do  roles.append('rabbitmq-server') -%}
{% do  roles.append('redis-server') -%}
{% set minions = salt['roles.list_minions'](roles) -%}

[DEFAULT]
{#
#-------------------------------------------------------------------------------
# API
#-------------------------------------------------------------------------------
# heat_metadata_server_url                       =
# heat_stack_user_role                           = heat_stack_user
# heat_waitcondition_server_url                  =
# heat_watch_server_url                          =
# secure_proxy_ssl_header                        = X-Forwarded-Proto
# stack_action_timeout                           = 3600
# stack_domain_admin                             = <None>
# stack_domain_admin_password                    = <None>
# stack_user_domain                              = <None>
# trusts_delegated_roles                         = heat_stack_owner
-#}
{#
#-------------------------------------------------------------------------------
# API: CFN
#-------------------------------------------------------------------------------
# instance_connection_https_validate_certificates = 1
# instance_connection_is_secure                  = 0
-#}
{#
#-------------------------------------------------------------------------------
# Clients
#-------------------------------------------------------------------------------
# region_name_for_services                       = <None>
-#}
{#
#-------------------------------------------------------------------------------
# Clients: Backends
#-------------------------------------------------------------------------------
# cloud_backend                                  = heat.engine.clients.OpenStackClients
-#}
#-------------------------------------------------------------------------------
# Common
#-------------------------------------------------------------------------------
host                                             = {{ salt['config.get']('fqdn') }}
{#
# deferred_auth_method                           = password
# disable_process_locking                        = False
# environment_dir                                = /etc/heat/environment.d
# event_purge_batch_size                         = 10
# instance_driver                                = heat.engine.nova
# instance_user                                  = ec2-user
# keystone_backend                               = heat.common.heat_keystoneclient.KeystoneClientV3
# lock_path                                      = <None>
# periodic_interval                              = 60
# plugin_dirs                                    = /usr/lib64/heat,/usr/lib/heat
-#}
{#
#-------------------------------------------------------------------------------
# Crypt
#-------------------------------------------------------------------------------
# auth_encryption_key                            = notgood but just long enough i think
-#}
{#
#-------------------------------------------------------------------------------
# Database
#-------------------------------------------------------------------------------
# db_backend                                     = sqlalchemy
# sqlite_db                                      = heat.sqlite
# sqlite_synchronous                             = True
-#}
{#
#-------------------------------------------------------------------------------
# Logging
#-------------------------------------------------------------------------------
# debug                                          = False
# default_log_levels                             = amqp=WARN,amqplib=WARN,boto=WARN,qpid=WARN,sqlalchemy=WARN,suds=INFO,iso8601=WARN
# default_notification_level                     = INFO
# fatal_deprecations                             = False
# instance_format                                = "[instance: %(uuid)s] "
# instance_uuid_format                           = "[instance: %(uuid)s] "
# log_config_append                              = <None>
# log_date_format                                = %Y-%m-%d %H:%M:%S
# log_dir                                        = <None>
# log_file                                       = <None>
# logging_context_format_string                  = %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [%(request_id)s %(user_identity)s] %(instance)s%(message)s
# logging_debug_format_suffix                    = %(funcName)s %(pathname)s:%(lineno)d
# logging_default_format_string                  = %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [-] %(instance)s%(message)s
# logging_exception_prefix                       = %(asctime)s.%(msecs)03d %(process)d TRACE %(name)s %(instance)s
# syslog_log_facility                            = LOG_USER
# use_stderr                                     = True
# use_syslog                                     = False
# verbose                                        = False
-#}
{#
#-------------------------------------------------------------------------------
# Network: Load Balancer
#-------------------------------------------------------------------------------
# loadbalancer_template                          = <None>
-#}
{#
#-------------------------------------------------------------------------------
# Policy
#-------------------------------------------------------------------------------
# policy_default_rule                            = default
# policy_file                                    = policy.json
-#}
{#
#-------------------------------------------------------------------------------
# Quota
#-------------------------------------------------------------------------------
# max_events_per_stack                           = 1000
# max_json_body_size                             = 1048576
# max_nested_stack_depth                         = 3
# max_resources_per_stack                        = 1000
# max_stacks_per_tenant                          = 100
# max_template_size                              = 524288
-#}
#-------------------------------------------------------------------------------
# RPC
#-------------------------------------------------------------------------------
{% if   minions['rabbitmq-server'] -%}
rpc_backend                                      = heat.openstack.common.rpc.impl_kombu
notification_driver                              = rabbit
{% elif minions['qpidd'] -%}
rpc_backend                                      = heat.openstack.common.rpc.impl_qpid
notification_driver                              = qpid
{% else -%}
rpc_backend                                      = heat.openstack.common.rpc.impl_zmq
notification_driver                              = noop
{% endif -%}
{#
# allowed_rpc_exception_modules                  = oslo.messaging.exceptions,nova.exception,cinder.exception,exceptions
# amqp_auto_delete                               = False
# amqp_durable_queues                            = False
# control_exchange                               = openstack
# default_publisher_id                           = <None>
# default_timeout                                = 20
# engine_life_check_timeout                      = 2
# fake_rabbit                                    = False
# kombu_reconnect_delay                          = 1.0
# kombu_ssl_ca_certs                             =
# kombu_ssl_certfile                             =
# kombu_ssl_keyfile                              =
# kombu_ssl_version                              =
# list_notifier_drivers                          = heat.openstack.common.notifier.no_op_notifier
# matchmaker_heartbeat_freq                      = 300
# matchmaker_heartbeat_ttl                       = 600
# notification_topics                            = notifications
# onready                                        = <None>
# publish_errors                                 = False
# rpc_cast_timeout                               = 30
# rpc_conn_pool_size                             = 30
# rpc_response_timeout                           = 60
# rpc_thread_pool_size                           = 64
# transport_url                                  = <None>
# volume_topic                                   = cinder-volume
-#}
{% if   minions['rabbitmq-server'] -%}
#-------------------------------------------------------------------------------
# RPC: RabbitMQ
#-------------------------------------------------------------------------------
{% if   minions['rabbitmq-server']|count > 1 -%}
{% set socks = [] -%}
{% for minion in minions['rabbitmq-server'] -%}
{% do  socks.append(minion + ':5672') -%}
{% endfor -%}
rabbit_hosts                                     = {{ socks|join(',') }}
{% else -%}
rabbit_host                                      = {{ minions['rabbitmq-server'][0] }}
{% endif -%}
rabbit_password                                  = heat
rabbit_userid                                    = heat
rabbit_virtual_host                              = /heat
# rabbit_ha_queues                               = False
# rabbit_login_method                            = AMQPLAIN
# rabbit_max_retries                             = 0
# rabbit_port                                    = 5672
# rabbit_retry_backoff                           = 2
# rabbit_retry_interval                          = 1
# rabbit_use_ssl                                 = False
{% elif minions['qpidd'] -%}
#-------------------------------------------------------------------------------
# RPC: Qpidd
#-------------------------------------------------------------------------------
{% if   minions['qpidd']|count > 1 -%}
{% set socks = [] -%}
{% for minion in minions['qpidd'] -%}
{% do  socks.append(minion + ':5672') -%}
{% endfor -%}
qpid_hosts                                       = {{ socks|join(',') }}
{% else -%}
qpid_hostname                                    = {{ minions['qpidd'][0] }}
{% endif -%}
# qpid_heartbeat                                 = 60
# qpid_password                                  =
# qpid_port                                      = 5672
# qpid_protocol                                  = tcp
# qpid_sasl_mechanisms                           =
# qpid_tcp_nodelay                               = True
# qpid_topology_version                          = 1
# qpid_username                                  =
{% else -%}
#-------------------------------------------------------------------------------
# RPC: ZeroMQ
#-------------------------------------------------------------------------------
rpc_zmq_host                                     = {{ salt['config.get']('fqdn') }}
# rpc_zmq_bind_address                           = *
# rpc_zmq_contexts                               = 1
# rpc_zmq_ipc_dir                                = /var/run/openstack
# rpc_zmq_matchmaker                             = oslo.messaging._drivers.matchmaker.MatchMakerLocalhost
# rpc_zmq_port                                   = 9501
# rpc_zmq_topic_backlog                          = <None>
{% endif -%}
{#
#-------------------------------------------------------------------------------
# Testing
#-------------------------------------------------------------------------------
# backdoor_port                                  = <None>
-#}

[auth_password]
{#
# multi_cloud                                    = False
# allowed_auth_uris                              =
-#}

[clients]
{#
# ca_file                                        = <None>
# cert_file                                      = <None>
# endpoint_type                                  = publicURL
# key_file                                       = <None>
# insecure                                       = False
-#}

[clients_ceilometer]
{#
# ca_file                                        = <None>
# cert_file                                      = <None>
# endpoint_type                                  = publicURL
# key_file                                       = <None>
# insecure                                       = False
-#}

[clients_cinder]
{#
# ca_file                                        = <None>
# cert_file                                      = <None>
# endpoint_type                                  = publicURL
# key_file                                       = <None>
# insecure                                       = False
-#}

[clients_heat]
{#
# ca_file                                        = <None>
# cert_file                                      = <None>
# endpoint_type                                  = publicURL
# key_file                                       = <None>
# insecure                                       = False
# url                                            = <None>
-#}

[clients_keystone]
{#
# ca_file                                        = <None>
# cert_file                                      = <None>
# endpoint_type                                  = publicURL
# key_file                                       = <None>
# insecure                                       = False
-#}

[clients_neutron]
{#
# ca_file                                        = <None>
# cert_file                                      = <None>
# endpoint_type                                  = publicURL
# key_file                                       = <None>
# insecure                                       = False
-#}

[clients_nova]
{#
# ca_file                                        = <None>
# cert_file                                      = <None>
# endpoint_type                                  = publicURL
# key_file                                       = <None>
# insecure                                       = False
-#}

[clients_swift]
{#
# ca_file                                        = <None>
# cert_file                                      = <None>
# endpoint_type                                  = publicURL
# key_file                                       = <None>
# insecure                                       = False
-#}

[clients_trove]
{#
# ca_file                                        = <None>
# cert_file                                      = <None>
# endpoint_type                                  = publicURL
# key_file                                       = <None>
# insecure                                       = False
-#}

[database]
{% set  connection = {} -%}
{% if   minions['mysql-server'] -%}
{% do   connection.update({'type': 'mysql'}) -%}
{% elif minions['postgresql'] -%}
{% do   connection.update({'type': 'postgresql'}) -%}
{% else -%}
{% do   connection.update({'type': 'sqlite'}) -%}
{% endif -%}
{% if minions['mariadb-server']
   or minions['mysql-server']
   or minions['postgresql'] -%}
connection                                       = {{ connection.type }}://{{ connection.username }}:{{ connection.password }}@{{ connection.hostname }}/{{ connection.database }}{% if connection.database_ssl_ca %}?ssl_ca={{ connection.database_ssl_ca }}{% if connection.database_ssl_cert %}&ssl_cert={{ database_ssl_cert }}&ssl_key={{ connection.database_ssl_key }}{% endif %}{% endif %}
{% else -%}
connection                                       = sqlite:///var/lib/heat/$sqlite_db
{% endif -%}
# backend                                        = sqlalchemy
# slave_connection                               =
# idle_timeout                                   = 3600
# min_pool_size                                  = 1
# max_pool_size                                  = <None>
# max_retries                                    = 10
# retry_interval                                 = 10
# max_overflow                                   = <None>
# connection_debug                               = 0
# connection_trace                               = False
# pool_timeout                                   = <None>

[ec2authtoken]
{#
# allowed_auth_uris                              =
# auth_uri                                       = <None>
# multi_cloud                                    = False
-#}

[heat_api]
{#
# backlog                                        = 4096
# bind_host                                      = 0.0.0.0
# bind_port                                      = 8004
# cert_file                                      = <None>
# key_file                                       = <None>
# max_header_line                                = 16384
# workers                                        = 0
-#}

[heat_api_cfn]
{#
# backlog                                        = 4096
# bind_host                                      = 0.0.0.0
# bind_port                                      = 8000
# cert_file                                      = <None>
# key_file                                       = <None>
# max_header_line                                = 16384
# workers                                        = 0
-#}

[heat_api_cloudwatch]
{#
# backlog                                        = 4096
# bind_host                                      = 0.0.0.0
# bind_port                                      = 8003
# cert_file                                      = <None>
# key_file                                       = <None>
# max_header_line                                = 16384
# workers                                        = 0
-#}

[keystone_authtoken]
{% if minions['keystone'] -%}
auth_uri                                         = http://{{ minions['keystone'][0] }}:5000/
{% endif -%}
{% if minions['memcached'] -%}
memcached_servers                                = {{ minions['memcached']|join(',') }}
{% endif -%}
{#
#  admin_password                                = <None>
#  admin_tenant_name                             = admin
#  admin_token                                   = <None>
#  admin_user                                    = <None>
#  auth_admin_prefix                             =
#  auth_host                                     = 127.0.0.1
#  auth_port                                     = 35357
#  auth_protocol                                 = https
#  auth_version                                  = <None>
#  cache                                         = <None>
#  cafile                                        = <None>
#  certfile                                      = <None>
#  delay_auth_decision                           = False
#  enforce_token_bind                            = permissive
#  http_connect_timeout                          = <None>
#  http_request_max_retries                      = 3
#  include_service_catalog                       = True
#  insecure                                      = False
#  keyfile                                       = <None>
#  memcache_secret_key                           = <None>
#  memcache_security_strategy                    = <None>
#  revocation_cache_time                         = 300
#  signing_dir                                   = <None>
#  token_cache_time                              = 300
-#}

[matchmaker_redis]
{% if minions['redis-server'] -%}
host                                             = {{ minions['redis-server'][0] }}
# password                                       = <None>
# port                                           = 6379
{% endif -%}

[matchmaker_ring]
{#
# ringfile                                       = /etc/oslo/matchmaker_ring.json
-#}

[paste_deploy]
{#
# api_paste_config                               = api-paste.ini
# flavor                                         = <None>
-#}

[revision]
{#
# heat_revision                                  = unknown
-#}

[rpc_notifier2]
{#
# topics                                         = notifications
-#}

[ssl]
{#
# ca_file                                        = <None>
# cert_file                                      = <None>
# key_file                                       = <None>
-#}
