# vi: set ft=ini.jinja :

{% set roles = [] -%}
{% do  roles.append('mariadb-server') -%}
{% do  roles.append('memcached') -%}
{% do  roles.append('mysql-server') -%}
{% do  roles.append('nova-api') -%}
{% do  roles.append('nova-api-ec2') -%}
{% do  roles.append('nova-api-metadata') -%}
{% do  roles.append('postgresql') -%}
{% do  roles.append('qpidd') -%}
{% do  roles.append('rabbitmq-server') -%}
{% do  roles.append('redis-server') -%}
{% set minions = salt['roles.dict'](roles) -%}

[DEFAULT]
#-------------------------------------------------------------------------------
# API
#-------------------------------------------------------------------------------
{% if   minions['nova-api-ec2'] -%}
compute_port                                     = 8773
{% elif minions['nova-api'] -%}
compute_port                                     = 8774
{% elif minions['nova-api-metadata'] -%}
compute_port                                     = 8775
{% endif -%}
{#
# admin_bind_host                                = 0.0.0.0
# admin_endpoint                                 = http://localhost:%(admin_port)s/
# admin_port                                     = 35357
# admin_token                                    = ADMIN
# domain_id_immutable                            = True
# list_limit                                     = <None>
# max_param_size                                 = 64
# max_request_body_size                          = 114688
# max_token_size                                 = 8192
# member_role_id                                 = 9fe2ff9ee4384b1894a90878d3e92bab
# member_role_name                               = _member_
# public_bind_host                               = 0.0.0.0
# public_endpoint                                = http://localhost:%(public_port)s/
# public_port                                    = 5000
# tcp_keepalive                                  = False
# tcp_keepidle                                   = 600
-#}
{#
#-------------------------------------------------------------------------------
# API: EC2
#-------------------------------------------------------------------------------
# keystone_ec2_url                               = http://localhost:5000/v2.0/ec2tokens
# keystone_ec2_keyfile                           = <None>
# keystone_ec2_certfile                          = <None>
# keystone_ec2_cafile                            = <None>
# keystone_ec2_insecure                          = False
-#}
{#
#-------------------------------------------------------------------------------
# Common:
#-------------------------------------------------------------------------------
# disable_process_locking                        = False
# lock_path                                      = <None>
-#}
{#
#-------------------------------------------------------------------------------
# Logging
#-------------------------------------------------------------------------------
# debug                                          = False
# default_log_levels                             = amqp=WARN,amqplib=WARN,boto=WARN,qpid=WARN,sqlalchemy=WARN,suds=INFO,iso8601=WARN,requests.packages.urllib3.connectionpool=WARN
# default_notification_level                     = INFO
# fatal_deprecations                             = False
# instance_format                                = "[instance: %(uuid)s] "
# instance_uuid_format                           = "[instance: %(uuid)s] "
# log_config_append                              = <None>
# log_date_format                                = %Y-%m-%d %H:%M:%S
# log_dir                                        = <None>
# log_file                                       = <None>
# logging_context_format_string                  = %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [%(request_id)s %(user_identity)s] %(instance)s%(message)s
# logging_debug_format_suffix                    = %(funcName)s %(pathname)s:%(lineno)d
# logging_default_format_string                  = %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [-] %(instance)s%(message)s
# logging_exception_prefix                       = %(asctime)s.%(msecs)03d %(process)d TRACE %(name)s %(instance)s
# publish_errors                                 = False
# syslog_log_facility                            = LOG_USER
# use_stderr                                     = True
# use_syslog                                     = False
# use_syslog_rfc_format                          = False
# verbose                                        = False
-#}
{#
#-------------------------------------------------------------------------------
# Policy
#-------------------------------------------------------------------------------
# policy_default_rule                            = default
# policy_file                                    = policy.json
-#}
#-------------------------------------------------------------------------------
# RPC
#-------------------------------------------------------------------------------
{% if   minions['rabbitmq-server'] -%}
rpc_backend                                      = rabbit
notification_driver                              = rabbit
{% elif minions['qpidd'] -%}
rpc_backend                                      = qpid
notification_driver                              = qpid
{% else -%}
rpc_backend                                      = zmq
notification_driver                              = noop
{% endif -%}
{#
# amqp_auto_delete                               = False
# amqp_durable_queues                            = False
# control_exchange                               = openstack
# default_publisher_id                           = <None>
# default_timeout                                = 20
# kombu_reconnect_delay                          = 1.0
# kombu_ssl_ca_certs                             =
# kombu_ssl_certfile                             =
# kombu_ssl_keyfile                              =
# kombu_ssl_version                              =
# matchmaker_heartbeat_freq                      = 300
# matchmaker_heartbeat_ttl                       = 600
# notification_topics                            = notifications
# onready                                        = <None>
# publish_errors                                 = False
# rpc_cast_timeout                               = 30
# rpc_conn_pool_size                             = 30
# rpc_response_timeout                           = 60
# rpc_thread_pool_size                           = 64
# transport_url                                  = <None>
-#}
{% if   minions['rabbitmq-server'] -%}
#-------------------------------------------------------------------------------
# RPC: RabbitMQ
#-------------------------------------------------------------------------------
{% if   minions['rabbitmq-server']|count > 1 -%}
{% set socks = [] -%}
{% for minion in minions['rabbitmq-server'] -%}
{% do  socks.append(minion + ':5672') -%}
{% endfor -%}
rabbit_hosts                                     = {{ socks|join(',') }}
{% else -%}
rabbit_host                                      = {{ minions['rabbitmq-server'][0] }}
{% endif -%}
rabbit_userid                                    = keystone
rabbit_password                                  = keystone
rabbit_virtual_host                              = /keystone
# rabbit_ha_queues                               = False
# rabbit_login_method                            = AMQPLAIN
# rabbit_max_retries                             = 0
# rabbit_use_ssl                                 = False
# rabbit_retry_backoff                           = 2
# rabbit_retry_interval                          = 1
# rabbit_port                                    = 5672
{% elif minions['qpidd'] -%}
#-------------------------------------------------------------------------------
# RPC: Qpidd
#-------------------------------------------------------------------------------
{% if   minions['qpidd']|count > 1 -%}
{% set socks = [] -%}
{% for minion in minions['qpidd'] -%}
{% do  socks.append(minion + ':5672') -%}
{% endfor -%}
qpid_hosts                                       = {{ socks|join(',') }}
{% else -%}
qpid_hostname                                    = {{ minions['qpidd'][0] }}
{% endif -%}
# qpid_heartbeat                                 = 60
# qpid_password                                  =
# qpid_port                                      = 5672
# qpid_protocol                                  = tcp
# qpid_sasl_mechanisms                           =
# qpid_tcp_nodelay                               = True
# qpid_topology_version                          = 1
# qpid_username                                  =
{% else -%}
#-------------------------------------------------------------------------------
# RPC: ZeroMQ
#-------------------------------------------------------------------------------
rpc_zmq_host                                     = {{ salt['config.get']('fqdn') }}
# rpc_zmq_bind_address                           = *
# rpc_zmq_contexts                               = 1
# rpc_zmq_ipc_dir                                = /var/run/openstack
# rpc_zmq_matchmaker                             = oslo.messaging._drivers.matchmaker.MatchMakerLocalhost
# rpc_zmq_port                                   = 9501
# rpc_zmq_topic_backlog                          = <None>
{% endif -%}
{#
#-------------------------------------------------------------------------------
# Security
#-------------------------------------------------------------------------------
# crypt_strength                                 = 40000
-#}
{#
#-------------------------------------------------------------------------------
# Testing
#-------------------------------------------------------------------------------
# allowed_rpc_exception_modules                  = oslo.messaging.exceptions,nova.exception,cinder.exception,exceptions
# backdoor_port                                  = <None>
# fake_rabbit                                    = False
-#}

[assignment]
{#
# cache_time                                     = <None>
# caching                                        = True
# driver                                         = <None>
# list_limit                                     = <None>
-#}

[auth]
{#
# external                                       = keystone.auth.plugins.external.DefaultDomain
# methods                                        = external,password,token
# password                                       = keystone.auth.plugins.password.Password
# token                                          = keystone.auth.plugins.token.Token
-#}

[cache]
{% if   minions['memcached'] -%}
backend                                          = dogpile.cache.memcache
enabled                                          = True
{% elif minions['redis-server'] -%}
backend                                          = dogpile.cache.redis
enabled                                          = True
{% else -%}
# backend                                        = keystone.common.cache.noop
# enabled                                        = False
{% endif -%}
{#
# backend_argument                               =
# config_prefix                                  = cache.keystone
# debug_cache_backend                            = False
# expiration_time                                = 600
# proxies                                        =
# use_key_mangler                                = True
-#}

[catalog]
{#
# driver                                         = keystone.catalog.backends.sql.Catalog
# list_limit                                     = <None>
# template_file                                  = default_catalog.templates
-#}

[credential]
{#
# driver                                         = keystone.credential.backends.sql.Credential
-#}

[database]
{% set  connection = {} -%}
{% if   minions['mysql-server'] -%}
{% do   connection.update({'type': 'mysql'}) -%}
{% elif minions['postgresql'] -%}
{% do   connection.update({'type': 'postgresql'}) -%}
{% else -%}
{% do   connection.update({'type': 'sqlite'}) -%}
{% endif -%}
{% if minions['mariadb-server']
   or minions['mysql-server']
   or minions['postgresql'] -%}
connection                                       = {{ connection.type }}://{{ connection.username }}:{{ connection.password }}@{{ connection.hostname }}/{{ connection.database }}{% if connection.database_ssl_ca %}?ssl_ca={{ connection.database_ssl_ca }}{% if connection.database_ssl_cert %}&ssl_cert={{ database_ssl_cert }}&ssl_key={{ connection.database_ssl_key }}{% endif %}{% endif %}
{% else -%}
connection                                       = sqlite:////var/lib/keystone/keystone.db
{% endif -%}
{#
# backend                                        = sqlalchemy
# connection_debug                               = 0
# connection_trace                               = False
# db_inc_retry_interval                          = True
# db_max_retries                                 = 20
# db_max_retry_interval                          = 10
# db_retry_interval                              = 1
# idle_timeout                                   = 3600
# max_overflow                                   = <None>
# max_pool_size                                  = <None>
# max_retries                                    = 10
# min_pool_size                                  = 1
# mysql_sql_mode                                 = TRADITIONAL
# pool_timeout                                   = <None>
# retry_interval                                 = 10
# sqlite_db                                      = keystone.sqlite
# sqlite_synchronous                             = True
# use_db_reconnect                               = False
-#}

[ec2]
{#
# driver                                         = keystone.contrib.ec2.backends.kvs.Ec2
-#}

[endpoint_filter]
{#
#-------------------------------------------------------------------------------
# API
#-------------------------------------------------------------------------------
# driver                                         = keystone.contrib.endpoint_filter.backends.sql.EndpointFilter
# return_all_endpoints_if_no_filter              = True
-#}

[extra_headers]
Distribution                                     = Ubuntu

[federation]
{#
# assertion_prefix                               =
# driver                                         = keystone.contrib.federation.backends.sql.Federation
-#}

[identity]
{#
# default_domain_id                              = default
# domain_specific_drivers_enabled                = False
# domain_config_dir                              = /etc/keystone/domains
# driver                                         = keystone.identity.backends.sql.Identity
# list_limit                                     = <None>
# max_password_length                            = 4096
-#}

[kvs]
{#
# backends                                       =
# config_prefix                                  = keystone.kvs
# default_lock_timeout                           = 5
# enable_key_mangler                             = True
-#}

[ldap]
{% if salt['config.get']('ldap:server')
  and salt['config.get']('ldap:basedn')
  and salt['config.get']('ldap:binddn')
  and salt['config.get']('ldap:bindpw') -%}
password                                         = {{ salt['config.get']('ldap:bindpw') }}
url                                              = ldap://{{ salt['config.get']('ldap:server') }}
user                                             = {{ salt['config.get']('ldap:binddn') }}
{% endif -%}
{#
# alias_dereferencing                            = default
# allow_subtree_delete                           = False
# chase_referrals                                = <None>
# dumb_member                                    = cn=dumb,dc=nonexistent
# group_additional_attribute_mapping             =
# group_allow_create                             = True
# group_allow_delete                             = True
# group_allow_update                             = True
# group_attribute_ignore                         =
# group_desc_attribute                           = description
# group_filter                                   = <None>
# group_id_attribute                             = cn
# group_member_attribute                         = member
# group_name_attribute                           = ou
# group_objectclass                              = groupOfNames
# group_tree_dn                                  = <None>
# page_size                                      = 0
# query_scope                                    = one
# role_additional_attribute_mapping              =
# role_allow_create                              = True
# role_allow_delete                              = True
# role_allow_update                              = True
# role_attribute_ignore                          =
# role_filter                                    = <None>
# role_id_attribute                              = cn
# role_member_attribute                          = roleOccupant
# role_name_attribute                            = ou
# role_objectclass                               = organizationalRole
# role_tree_dn                                   = <None>
# suffix                                         = cn=example,cn=com
# tenant_additional_attribute_mapping            =
# tenant_allow_create                            = True
# tenant_allow_delete                            = True
# tenant_allow_update                            = True
# tenant_attribute_ignore                        =
# tenant_desc_attribute                          = description
# tenant_domain_id_attribute                     = businessCategory
# tenant_enabled_attribute                       = enabled
# tenant_enabled_emulation_dn                    = <None>
# tenant_enabled_emulation                       = False
# tenant_filter                                  = <None>
# tenant_id_attribute                            = cn
# tenant_member_attribute                        = member
# tenant_name_attribute                          = ou
# tenant_objectclass                             = groupOfNames
# tenant_tree_dn                                 = <None>
# tls_cacertdir                                  = <None>
# tls_cacertfile                                 = <None>
# tls_req_cert                                   = demand
# use_dumb_member                                = False
# user_additional_attribute_mapping              =
# user_allow_create                              = True
# user_allow_delete                              = True
# user_allow_update                              = True
# user_attribute_ignore                          = default_project_id,tenants
# user_default_project_id_attribute              = <None>
# user_enabled_attribute                         = enabled
# user_enabled_default                           = True
# user_enabled_emulation_dn                      = <None>
# user_enabled_emulation                         = False
# user_enabled_mask                              = 0
# user_filter                                    = <None>
# user_id_attribute                              = cn
# user_mail_attribute                            = email
# user_name_attribute                            = sn
# user_objectclass                               = inetOrgPerson
# user_pass_attribute                            = userPassword
# user_tree_dn                                   = <None>
# use_tls                                        = False
-#}

[matchmaker_redis]
{% if minions['redis-server'] -%}
host                                             = {{ minions['redis-server'][0] }}
# password                                       = <None>
# port                                           = 6379
{% endif -%}

[matchmaker_ring]
{#
# ringfile                                       = /etc/oslo/matchmaker_ring.json
-#}

[memcache]
{% if          minions['memcached'] -%}
{% set socks = [] -%}
{% for minion in minions['memcached'] -%}
{% do  socks.append(minion + ':11211') -%}
{% endfor -%}
servers                                          = {{ socks|join(',') }}
# max_compare_and_set_retry                      = 16
{% endif -%}

[oauth1]
{#
# access_token_duration                          = 86400
# driver                                         = keystone.contrib.oauth1.backends.sql.OAuth1
# request_token_duration                         = 28800
-#}

[os_inherit]
{#
# enabled                                        = False
-#}

[paste_deploy]
{#
#-------------------------------------------------------------------------------
# API
#-------------------------------------------------------------------------------
# config_file                                    = keystone-paste.ini
-#}

[policy]
{#
# driver                                         = keystone.policy.backends.sql.Policy
# list_limit                                     = <None>
-#}

[revoke]
{#
# caching                                        = True
# driver                                         = keystone.contrib.revoke.backends.kvs.Revoke
# expiration_buffer                              = 1800
-#}

[signing]
{#
# ca_certs                                       = /etc/keystone/ssl/certs/ca.pem
# ca_key                                         = /etc/keystone/ssl/private/cakey.pem
# certfile                                       = /etc/keystone/ssl/certs/signing_cert.pem
# cert_subject                                   = /C=US/ST=Unset/L=Unset/O=Unset/CN=www.example.com
# keyfile                                        = /etc/keystone/ssl/private/signing_key.pem
# key_size                                       = 2048
# token_format                                   = <None>
# valid_days                                     = 3650
-#}

[ssl]
{#
# ca_certs                                       = /etc/keystone/ssl/certs/ca.pem
# ca_key                                         = /etc/keystone/ssl/private/cakey.pem
# certfile                                       = /etc/keystone/ssl/certs/keystone.pem
# cert_required                                  = False
# cert_subject                                   = /C=US/ST=Unset/L=Unset/O=Unset/CN=localhost
# enable                                         = False
# keyfile                                        = /etc/keystone/ssl/private/keystonekey.pem
# key_size                                       = 1024
# valid_days                                     = 3650
-#}

[stats]
{#
# driver                                         = keystone.contrib.stats.backends.kvs.Stats
-#}

[token]
{#
# bind                                           =
# enforce_token_bind                             = permissive
# expiration                                     = 3600
# provider                                       = <None>
# driver                                         = keystone.token.backends.sql.Token
# caching                                        = True
# revocation_cache_time                          = 3600
# cache_time                                     = <None>
# revoke_by_id                                   = True
-#}

[trust]
{#
# enabled                                        = True
# driver                                         = keystone.trust.backends.sql.Trust
-#}
