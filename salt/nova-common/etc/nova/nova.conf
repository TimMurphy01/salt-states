# vi: set ft=ini.jinja :

{% set ipv4  = salt['config.get']('fqdn_ip4') -%}
{% set roles = [] -%}
{% do  roles.append('glance-api') -%}
{% do  roles.append('keystone') -%}
{% do  roles.append('mariadb-server') -%}
{% do  roles.append('memcached') -%}
{% do  roles.append('mysql-server') -%}
{% do  roles.append('neutron-server') -%}
{% do  roles.append('nova-novncproxy') -%}
{% do  roles.append('nova-spiceproxy') -%}
{% do  roles.append('nova-xvpvncproxy') -%}
{% do  roles.append('postgresql') -%}
{% do  roles.append('qpidd') -%}
{% do  roles.append('rabbitmq-server') -%}
{% do  roles.append('redis-server') -%}
{% set minions = salt['roles.dict'](roles) -%}

[DEFAULT]
#-------------------------------------------------------------------------------
# API
#-------------------------------------------------------------------------------
enabled_apis                                     = ec2,osapi_compute,metadata
{#
# api_rate_limit                                 = False
# enable_new_services                            = True
# enabled_ssl_apis                               =
# instance_name_template                         = instance-%08x
# max_header_line                                = 16384
# multi_instance_display_name_template           = %(name)s-%(uuid)s
# non_inheritable_image_properties               = cache_in_nova,bittorrent
# null_kernel                                    = nokernel
# osapi_compute_ext_list                         =
# osapi_compute_extension                        = ['nova.api.openstack.compute.contrib.standard_extensions']
# osapi_compute_link_prefix                      = <None>
# osapi_compute_listen                           = 0.0.0.0
# osapi_compute_listen_port                      = 8774
# osapi_compute_workers                          = <None>
# osapi_hide_server_address_states               = building
# servicegroup_driver                            = db
# snapshot_name_template                         = snapshot-%s
# use_forwarded_for                              = False
-#}
#-------------------------------------------------------------------------------
# API: EC2
#-------------------------------------------------------------------------------
ec2_private_dns_show_ip                          = True
{% if minions['keystone'] -%}
keystone_ec2_url                                 = http://{{ minions['keystone'][0] }}:5000/v2.0/ec2tokens
{% endif -%}
# ec2_dmz_host                                   = $my_ip
# ec2_host                                       = $my_ip
# ec2_listen                                     = 0.0.0.0
# ec2_listen_port                                = 8773
# ec2_path                                       = /services/Cloud
# ec2_port                                       = 8773
# ec2_scheme                                     = http
# ec2_strict_validation                          = True
# ec2_timestamp_expiry                           = 300
# ec2_workers                                    = <None>
# lockout_attempts                               = 5
# lockout_minutes                                = 15
# lockout_window                                 = 15
# region_list                                    =
{#
#-------------------------------------------------------------------------------
# API: Metadata
#-------------------------------------------------------------------------------
# metadata_host                                  = $my_ip
# metadata_listen                                = 0.0.0.0
# metadata_listen_port                           = 8775
# metadata_manager                               = nova.api.manager.MetadataManager
# metadata_port                                  = 8775
# metadata_workers                               = <None>
# vendordata_driver                              = nova.api.metadata.vendordata_json.JsonFileVendorData
# vendordata_jsonfile_path                       = <None>
-#}
#-------------------------------------------------------------------------------
# Authentication and Authorization
#-------------------------------------------------------------------------------
{% if minions['keystone'] -%}
auth_strategy                                    = keystone
{% else -%}
auth_strategy                                    = noauth
{% endif -%}
{% if salt['config.get']('ldap:server')
  and salt['config.get']('ldap:basedn')
  and salt['config.get']('ldap:binddn')
  and salt['config.get']('ldap:bindpw') -%}
#-------------------------------------------------------------------------------
# Authentication and Authorization: LDAP
#-------------------------------------------------------------------------------
ldap_dns_base_dn                                 = {{ salt['config.get']('ldap:basedn') }}
ldap_dns_password                                = {{ salt['config.get']('ldap:bindpw') }}
ldap_dns_url                                     = ldap://{{ salt['config.get']('ldap:server') }}:389
ldap_dns_user                                    = {{ salt['config.get']('ldap:binddn') }}
# ldap_dns_servers                               = ['dns.example.org']
# ldap_dns_soa_expiry                            = 86400
# ldap_dns_soa_hostmaster                        = hostmaster@example.org
# ldap_dns_soa_minimum                           = 7200
# ldap_dns_soa_refresh                           = 1800
# ldap_dns_soa_retry                             = 3600
{% endif -%}
{#
#-------------------------------------------------------------------------------
# Availability Zones
#-------------------------------------------------------------------------------
# default_availability_zone                      = nova
# default_schedule_zone                          = <None>
# internal_service_availability_zone             = internal
-#}
{#
#-------------------------------------------------------------------------------
# Certificate Authority
#-------------------------------------------------------------------------------
# ca_file                                        = cacert.pem
# ca_path                                        = $state_path/CA
# cert_manager                                   = nova.cert.manager.CertManager
# cert_topic                                     = cert
# crl_file                                       = crl.pem
# key_file                                       = private/cakey.pem
# keys_path                                      = $state_path/keys
# project_cert_subject                           = /C=US/ST=California/O=OpenStack/
# use_project_ca                                 = False
# user_cert_subject                              = /C=US/ST=California/O=OpenStack/OU=NovaDev/CN=%.16s-%.16s-%s
-#}
#-------------------------------------------------------------------------------
# Common
#-------------------------------------------------------------------------------
host                                             = {{ salt['config.get']('fqdn') }}
lock_path                                        = /var/lock/nova
my_ip                                            = {{ ipv4[0] }}
state_path                                       = /var/lib/nova
{% if minions['memcached'] -%}
memcached_servers                                = {{ minions['memcached']|join(',') }}
{% endif -%}
{#
# bindir                                         = /usr/local/bin
# compute_topic                                  = compute
# console_topic                                  = console
# consoleauth_topic                              = consoleauth
# disable_process_locking                        = False
# notify_api_faults                              = False
# notify_on_state_change                         = <None>
# pybasedir                                      = /usr/lib/python/site-packages
# report_interval                                = 10
# rootwrap_config                                = /etc/nova/rootwrap.conf
# service_down_time                              = 60
# tempdir                                        = <None>
# transport_url                                  = <None>
-#}
{#
#-------------------------------------------------------------------------------
# Compute
#-------------------------------------------------------------------------------
# compute_available_monitors                     = ['nova.compute.monitors.all_monitors']
# compute_driver                                 = <None>
# compute_manager                                = nova.compute.manager.ComputeManager
# compute_monitors                               =
# compute_stats_class                            = nova.compute.stats.Stats
# console_host                                   = oslo
# console_manager                                = nova.console.manager.ConsoleProxyManager
# default_ephemeral_format                       = <None>
# default_flavor                                 = m1.small
# default_publisher_id                           = <None>
# enable_instance_password                       = True
# force_raw_images                               = True
# heal_instance_info_cache_interval              = 60
# image_cache_manager_interval                   = 2400
# image_cache_subdirectory_name                  = _base
# image_handlers                                 = download
# instance_build_timeout                         = 0
# instance_delete_interval                       = 300
# instance_usage_audit                           = False
# instance_usage_audit_period                    = month
# instances_path                                 = $state_path/instances
# maximum_instance_delete_attempts               = 5
# preallocate_images                             = none
# reboot_timeout                                 = 0
# reclaim_instance_interval                      = 0
# rescue_timeout                                 = 0
# resize_confirm_window                          = 0
# resume_guests_state_on_host_boot               = False
# running_deleted_instance_action                = reap
# running_deleted_instance_poll_interval         = 1800
# running_deleted_instance_timeout               = 0
# shelved_offload_time                           = 0
# shelved_poll_interval                          = 3600
# sync_power_state_interval                      = 600
# timeout_nbd                                    = 10
# use_cow_images                                 = True
# vcpu_pin_set                                   = <None>
# vif_plugging_is_fatal                          = True
# vif_plugging_timeout                           = 300
# virt_mkfs                                      = []
-#}
{#
#-------------------------------------------------------------------------------
# Compute: Libvirt
#-------------------------------------------------------------------------------
# remove_unused_base_images                      = True
# remove_unused_original_minimum_age_seconds     = 86400
-#}
{#
#-------------------------------------------------------------------------------
# Compute: Xen
#-------------------------------------------------------------------------------
# console_driver                                 = nova.console.xvp.XVPConsoleProxy
# console_vmrc_error_retries                     = 10
# console_vmrc_port                              = 443
# console_xvp_conf                               = /etc/xvp.conf
# console_xvp_conf_template                      = $pybasedir/nova/console/xvp.conf.template
# console_xvp_log                                = /var/log/xvp.log
# console_xvp_multiplex_port                     = 5900
# console_xvp_pid                                = /var/run/xvp.pid
# stub_compute                                   = False
-#}
{#
#-------------------------------------------------------------------------------
# Conductor
#-------------------------------------------------------------------------------
# migrate_max_retries                            = -1
-#}
{#
#-------------------------------------------------------------------------------
# Config Drive
#-------------------------------------------------------------------------------
# config_drive_format                            = iso9660
# config_drive_skip_versions                     = 1.0 2007-01-19 2007-03-01 2007-08-29 2007-10-10 2007-12-15 2008-02-01 2008-09-01
# config_drive_tempdir                           = <None>
# force_config_drive                             = <None>
# mkisofs_cmd                                    = genisoimage
-#}
{#
#-------------------------------------------------------------------------------
# Console
#-------------------------------------------------------------------------------
# console_public_hostname                        = oslo
# console_token_ttl                              = 600
# consoleauth_manager                            = nova.consoleauth.manager.ConsoleAuthManager
-#}
{% if minions['nova-novncproxy'] -%}
#-------------------------------------------------------------------------------
# Console: VNC
#-------------------------------------------------------------------------------
novncproxy_base_url                              = http://{{ minions['nova-novncproxy'][0] }}:6080/vnc_auto.html
# vnc_enabled                                    = True
# vnc_keymap                                     = en-us
# vncserver_listen                               = 127.0.0.1
# vncserver_proxyclient_address                  = 127.0.0.1
{% endif -%}
{% if minions['nova-xvpvncproxy'] -%}
#-------------------------------------------------------------------------------
# Console: XVP VNC
#-------------------------------------------------------------------------------
xvpvncproxy_base_url                             = http://{{ minions['nova-xvpvncproxy'][0] }}:6081/console
# xvpvncproxy_host                               = 0.0.0.0
# xvpvncproxy_port                               = 6081
{% endif -%}
{#
#-------------------------------------------------------------------------------
# Database
#-------------------------------------------------------------------------------
# db_driver                                      = nova.db
# sqlite_synchronous                             = True
-#}
{#
#-------------------------------------------------------------------------------
# fping
#-------------------------------------------------------------------------------
# fping_path                                     = /usr/sbin/fping
-#}
{#
#-------------------------------------------------------------------------------
# Live Migration
#-------------------------------------------------------------------------------
# live_migration_retry_count                     = 30
-#}
#-------------------------------------------------------------------------------
# Logging
#-------------------------------------------------------------------------------
log_dir                                          = /var/log/nova
{#
# debug                                          = False
# default_log_levels                             = amqp=WARN,amqplib=WARN,boto=WARN,qpid=WARN,sqlalchemy=WARN,suds=INFO,oslo.messaging=INFO,iso8601=WARN
# default_notification_level                     = INFO
# fatal_deprecations                             = False
# fatal_exception_format_errors                  = False
# instance_format                                = "[instance: %(uuid)s] "
# instance_uuid_format                           = "[instance: %(uuid)s] "
# log_config_append                              = <None>
# log_date_format                                = %Y-%m-%d %H:%M:%S
# log_file                                       = <None>
# logging_context_format_string                  = %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [%(request_id)s %(user)s %(tenant)s] %(instance)s %(message)s
# logging_debug_format_suffix                    = %(funcName)s %(pathname)s:%(lineno)d
# logging_default_format_string                  = %(asctime)s.%(msecs)03d
# logging_exception_prefix                       = %(asctime)s.%(msecs)03d %(process)d TRACE %(name)s %(instance)s
# publish_errors                                 = False
# syslog_log_facility                            = syslog
# syslog_log_level                               = ERROR
# use_stderr                                     = True
# use_syslog                                     = False
# use_syslog_rfc_format                          = False
# verbose                                        = False
-#}
#-------------------------------------------------------------------------------
# Network
#-------------------------------------------------------------------------------
dhcpbridge                                       = /usr/bin/nova-dhcpbridge
dhcpbridge_flagfile                              = /etc/nova/nova.conf
force_dhcp_release                               = True
{#
# allow_same_net_traffic                         = True
# auto_assign_floating_ip                        = False
# cnt_vpn_clients                                = 0
# create_unique_mac_address_attempts             = 5
# default_access_ip_network_name                 = <None>
# default_floating_pool                          = nova
# defer_iptables_apply                           = False
# dhcp_domain                                    = novalocal
# dhcp_lease_time                                = 120
# dns_server                                     = []
# dns_update_periodic_interval                   = -1
# dnsmasq_config_file                            =
# firewall_driver                                = <None>
# fixed_ip_disassociate_timeout                  = 600
# flat_injected                                  = False
# flat_interface                                 = <None>
# flat_network_bridge                            = <None>
# flat_network_dns                               = 8.8.4.4
# floating_ip_dns_manager                        = nova.network.noop_dns_driver.NoopDNSDriver
# force_snat_range                               = []
# forward_bridge_interface                       = ['all']
# gateway                                        = <None>
# injected_network_template                      = $pybasedir/nova/virt/interfaces.template
# instance_dns_domain                            =
# instance_dns_manager                           = nova.network.noop_dns_driver.NoopDNSDriver
# iptables_bottom_regex                          =
# iptables_drop_action                           = DROP
# iptables_top_regex                             =
# l3_lib                                         = nova.network.l3.LinuxNetL3
# linuxnet_interface_driver                      = nova.network.linux_net.LinuxBridgeInterfaceDriver
# linuxnet_ovs_integration_bridge                = br-int
# multi_host                                     = False
# network_allocate_retries                       = 0
# network_api_class                              = nova.network.api.API
# network_device_mtu                             = <None>
# network_driver                                 = nova.network.linux_net
# network_manager                                = nova.network.manager.VlanManager
# network_size                                   = 256
# network_topic                                  = network
# networks_path                                  = $state_path/networks
# num_networks                                   = 1
# ovs_vsctl_timeout                              = 120
# public_interface                               = eth0
# routing_source_ip                              = $my_ip
# security_group_api                             = nova
# send_arp_for_ha                                = False
# send_arp_for_ha_count                          = 3
# share_dhcp_address                             = False
# teardown_unused_network_gateway                = False
# update_dns_entries                             = False
# use_network_dns_servers                        = False
# use_neutron_default_nets                       = False
# use_single_default_gateway                     = False
# vlan_interface                                 = <None>
# vlan_start                                     = 100
-#}
{#
#-------------------------------------------------------------------------------
# Network: IPv6
#-------------------------------------------------------------------------------
# fixed_range_v6                                 = fd00::/48
# gateway_v6                                     = <None>
# ipv6_backend                                   = rfc2462
# use_ipv6                                       = False
-#}
#-------------------------------------------------------------------------------
# Network: Neutron
#-------------------------------------------------------------------------------
{% if minions['keystone'] -%}
neutron_admin_auth_url                           = http://{{ minions['keystone'][0] }}:5000/v2.0
neutron_auth_strategy                            = keystone
{% else -%}
neutron_auth_strategy                            = noauth
{% endif -%}
{% if minions['neutron-server'] -%}
neutron_url                                      = http://{{ minions['neutron-server'][0] }}:9696
{% endif -%}
{#
# neutron_admin_password                         = <None>
# neutron_admin_tenant_id                        = <None>
# neutron_admin_tenant_name                      = <None>
# neutron_admin_username                         = <None>
# neutron_api_insecure                           = False
# neutron_ca_certificates_file                   = <None>
# neutron_default_tenant_id                      = default
# neutron_extension_sync_interval                = 600
# neutron_metadata_proxy_shared_secret           =
# neutron_ovs_bridge                             = br-int
# neutron_region_name                            = <None>
# neutron_url_timeout                            = 30
# service_neutron_metadata_proxy                 = False
-#}
{#
#-------------------------------------------------------------------------------
# Network: VPN
#-------------------------------------------------------------------------------
# boot_script_template                           = $pybasedir/nova/cloudpipe/bootscript.template
# dmz_cidr                                       =
# dmz_mask                                       = 255.255.255.0
# dmz_net                                        = 10.0.0.0
# vpn_flavor                                     = m1.tiny
# vpn_image_id                                   = 0
# vpn_ip                                         = $my_ip
# vpn_key_suffix                                 = -vpn
# vpn_start                                      = 1000
-#}
{#
#-------------------------------------------------------------------------------
# PCI
#-------------------------------------------------------------------------------
# pci_alias                                      = []
# pci_passthrough_whitelist                      = []
-#}
{#
#-------------------------------------------------------------------------------
# Periodic
#-------------------------------------------------------------------------------
# periodic_enable                                = True
# periodic_fuzzy_delay                           = 60
# run_external_periodic_tasks                    = True
-#}
{#
#-------------------------------------------------------------------------------
# Policy
#-------------------------------------------------------------------------------
# allow_instance_snapshots                       = True
# allow_migrate_to_same_host                     = False
# allow_resize_to_same_host                      = False
# max_age                                        = 0
# max_local_block_devices                        = 3
# osapi_compute_unique_server_name_scope         =
# osapi_max_limit                                = 1000
# osapi_max_request_body_size                    = 114688
# password_length                                = 12
# policy_default_rule                            = default
# policy_file                                    = policy.json
# reservation_expire                             = 86400
# resize_fs_using_block_device                   = False
# until_refresh                                  = 0
-#}
{#
#-------------------------------------------------------------------------------
# Quota
#-------------------------------------------------------------------------------
# bandwidth_poll_interval                        = 600
# enable_network_quota                           = False
# quota_cores                                    = 20
# quota_driver                                   = nova.quota.DbQuotaDriver
# quota_fixed_ips                                = -1
# quota_floating_ips                             = 10
# quota_injected_file_content_bytes              = 10240
# quota_injected_file_path_bytes                 = 255
# quota_injected_files                           = 5
# quota_instances                                = 10
# quota_key_pairs                                = 100
# quota_metadata_items                           = 128
# quota_ram                                      = 51200
# quota_security_group_rules                     = 20
# quota_security_groups                          = 10
-#}
{#
#-------------------------------------------------------------------------------
# Rootwrap
#-------------------------------------------------------------------------------
# filters_path                                   = /etc/nova/rootwrap.d,/usr/share/nova/rootwrap
# exec_dirs                                      = /sbin,/usr/sbin,/bin,/usr/bin
-#}
#-------------------------------------------------------------------------------
# RPC
#-------------------------------------------------------------------------------
{% if   minions['rabbitmq-server'] -%}
rpc_backend                                      = rabbit
notification_driver                              = rabbit
{% elif minions['qpidd'] -%}
rpc_backend                                      = qpid
notification_driver                              = qpid
{% else -%}
rpc_backend                                      = zmq
notification_driver                              = noop
{% endif -%}
{#
# amqp_auto_delete                               = False
# amqp_durable_queues                            = False
# control_exchange                               = openstack
# kombu_reconnect_delay                          = 1.0
# kombu_ssl_ca_certs                             =
# kombu_ssl_certfile                             =
# kombu_ssl_keyfile                              =
# kombu_ssl_version                              =
# matchmaker_heartbeat_freq                      = 300
# matchmaker_heartbeat_ttl                       = 600
# notification_topics                            = notifications
# onready                                        = <None>
# publish_errors                                 = False
# rpc_cast_timeout                               = 30
# rpc_conn_pool_size                             = 30
# rpc_response_timeout                           = 60
# rpc_thread_pool_size                           = 64
-#}
{% if   minions['rabbitmq-server'] -%}
#-------------------------------------------------------------------------------
# RPC: RabbitMQ
#-------------------------------------------------------------------------------
{% if   minions['rabbitmq-server']|count > 1 -%}
{% set socks = [] -%}
{% for minion in minions['rabbitmq-server'] -%}
{% do  socks.append(minion + ':5672') -%}
{% endfor -%}
rabbit_hosts                                     = {{ socks|join(',') }}
{% else -%}
rabbit_host                                      = {{ minions['rabbitmq-server'][0] }}
{% endif -%}
rabbit_password                                  = nova
rabbit_userid                                    = nova
rabbit_virtual_host                              = /nova
# rabbit_ha_queues                               = False
# rabbit_login_method                            = AMQPLAIN
# rabbit_max_retries                             = 0
# rabbit_port                                    = 5672
# rabbit_retry_backoff                           = 2
# rabbit_retry_interval                          = 1
# rabbit_use_ssl                                 = False
{% elif minions['qpidd'] -%}
#-------------------------------------------------------------------------------
# RPC: Qpidd
#-------------------------------------------------------------------------------
{% if   minions['qpidd']|count > 1 -%}
{% set socks = [] -%}
{% for minion in minions['qpidd'] -%}
{% do  socks.append(minion + ':5672') -%}
{% endfor -%}
qpid_hosts                                       = {{ socks|join(',') }}
{% else -%}
qpid_hostname                                    = {{ minions['qpidd'][0] }}
{% endif -%}
# qpid_heartbeat                                 = 60
# qpid_password                                  =
# qpid_port                                      = 5672
# qpid_protocol                                  = tcp
# qpid_sasl_mechanisms                           =
# qpid_tcp_nodelay                               = True
# qpid_topology_version                          = 1
# qpid_username                                  =
{% else -%}
#-------------------------------------------------------------------------------
# RPC: ZeroMQ
#-------------------------------------------------------------------------------
rpc_zmq_host                                     = {{ salt['config.get']('fqdn') }}
# rpc_zmq_bind_address                           = *
# rpc_zmq_contexts                               = 1
# rpc_zmq_ipc_dir                                = /var/run/openstack
# rpc_zmq_matchmaker                             = oslo.messaging._drivers.matchmaker.MatchMakerLocalhost
# rpc_zmq_port                                   = 9501
# rpc_zmq_topic_backlog                          = <None>
{% endif -%}
{#
#-------------------------------------------------------------------------------
# Scheduling
#-------------------------------------------------------------------------------
# aggregate_image_properties_isolation_namespace = <None>
# aggregate_image_properties_isolation_separator = .
# cpu_allocation_ratio                           = 16.0
# disk_allocation_ratio                          = 1.0
# isolated_hosts                                 =
# isolated_images                                =
# max_instances_per_host                         = 50
# max_io_ops_per_host                            = 8
# ram_allocation_ratio                           = 1.5
# ram_weight_multiplier                          = 1.0
# reserved_host_disk_mb                          = 0
# reserved_host_memory_mb                        = 512
# restrict_isolated_hosts_to_isolated_images     = True
# scheduler_available_filters                    = ['nova.scheduler.filters.all_filters']
# scheduler_default_filters                      = RetryFilter,AvailabilityZoneFilter,RamFilter,ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,ServerGroupAntiAffinityFilter,ServerGroupAffinityFilter
# scheduler_driver                               = nova.scheduler.filter_scheduler.FilterScheduler
# scheduler_driver_task_period                   = 60
# scheduler_host_manager                         = nova.scheduler.host_manager.HostManager
# scheduler_host_subset_size                     = 1
# scheduler_json_config_location                 =
# scheduler_manager                              = nova.scheduler.manager.SchedulerManager
# scheduler_max_attempts                         = 3
# scheduler_topic                                = scheduler
# scheduler_weight_classes                       = nova.scheduler.weights.all_weighers
-#}
{#
#-------------------------------------------------------------------------------
# Storage: Cinder
#-------------------------------------------------------------------------------
# cinder_api_insecure                            = False
# cinder_ca_certificates_file                    = <None>
# cinder_catalog_info                            = volume:cinder:publicURL
# cinder_cross_az_attach                         = True
# cinder_endpoint_template                       = <None>
# cinder_http_retries                            = 3
# os_region_name                                 = <None>
# volume_api_class                               = nova.volume.cinder.API
# volume_usage_poll_interval                     = 0
-#}
{% if minions['glance-api'] -%}
#-------------------------------------------------------------------------------
# Storage: Glance
#-------------------------------------------------------------------------------
{% if minions['glance-api']|count > 1 -%}
{% set socks = [] -%}
{% for minion in minions['glance-api'] -%}
{% do  socks.append(minion + ':9292') -%}
{% endfor -%}
glance_api_servers                               = {{ socks|join(',') }}
{% else -%}
glance_host                                      = {{ minions['glance-api'][0] }}
{% endif -%}
# allowed_direct_url_schemes                     =
# glance_api_insecure                            = False
# glance_num_retries                             = 0
# glance_port                                    = 9292
# glance_protocol                                = http
# osapi_glance_link_prefix                       = <None>
{% endif -%}
{#
#-------------------------------------------------------------------------------
# Storage: S3
#-------------------------------------------------------------------------------
# buckets_path                                   = $state_path/buckets
# image_decryption_dir                           = /tmp
# s3_access_key                                  = notchecked
# s3_affix_tenant                                = False
# s3_host                                        = $my_ip
# s3_listen                                      = 0.0.0.0
# s3_listen_port                                 = 3333
# s3_port                                        = 3333
# s3_secret_key                                  = notchecked
# s3_use_ssl                                     = False
-#}
{#
#-------------------------------------------------------------------------------
# Testing
#-------------------------------------------------------------------------------
# allowed_rpc_exception_modules                  = oslo.messaging.exceptions,nova.exception,cinder.exception,exceptions
# backdoor_port                                  = <None>
# fake_call                                      = False
# fake_network                                   = False
# fake_rabbit                                    = False
# monkey_patch                                   = False
# monkey_patch_modules                           = nova.api.ec2.cloud:nova.notifications.notify_decorator,nova.compute.api:nova.notifications.notify_decorator
-#}
#-------------------------------------------------------------------------------
# WSGI
#-------------------------------------------------------------------------------
api_paste_config                                 = /etc/nova/api-paste.ini
{#
# ssl_ca_file                                    = <None>
# ssl_cert_file                                  = <None>
# ssl_key_file                                   = <None>
# tcp_keepidle                                   = 600
# wsgi_default_pool_size                         = 1000
# wsgi_log_format                                = %(client_ip)s "%(request_line)s" status: %(status_code)s len: %(body_length)s time: %(wall_seconds).7f
-#}

[baremetal]
{% set  connection = {} -%}
{% if   minions['mysql-server'] -%}
{% do   connection.update({'type': 'mysql'}) -%}
{% elif minions['postgresql'] -%}
{% do   connection.update({'type': 'postgresql'}) -%}
{% else -%}
{% do   connection.update({'type': 'sqlite'}) -%}
{% endif -%}
{% if minions['mariadb-server']
   or minions['mysql-server']
   or minions['postgresql'] -%}
sql_connection                                   = {{ connection.type }}://{{ connection.username }}:{{ connection.password }}@{{ connection.hostname }}/{{ connection.database }}{% if connection.database_ssl_ca %}?ssl_ca={{ connection.database_ssl_ca }}{% if connection.database_ssl_cert %}&ssl_cert={{ database_ssl_cert }}&ssl_key={{ connection.database_ssl_key }}{% endif %}{% endif %}
{% else -%}
sql_connection                                   = sqlite:///$state_path/baremetal_nova.sqlite
{% endif -%}
{#
# db_backend                                     = sqlalchemy
# deploy_kernel                                  = <None>
# deploy_ramdisk                                 = <None>
# driver                                         = nova.virt.baremetal.pxe.PXE
# flavor_extra_specs                             =
# ipmi_power_retry                               = 10
# net_config_template                            = $pybasedir/nova/virt/baremetal/net-dhcp.ubuntu.template
# power_manager                                  = nova.virt.baremetal.ipmi.IPMI
# pxe_append_params                              = nofb nomodeset vga=normal
# pxe_bootfile_name                              = pxelinux.0
# pxe_config_template                            = $pybasedir/nova/virt/baremetal/pxe_config.template
# pxe_deploy_timeout                             = 0
# pxe_network_config                             = False
# terminal                                       = shellinaboxd
# terminal_cert_dir                              = <None>
# terminal_pid_dir                               = $state_path/baremetal/console
# tftp_root                                      = /tftpboot
# use_file_injection                             = False
# use_unsafe_iscsi                               = False
# vif_driver                                     = nova.virt.baremetal.vif_driver.BareMetalVIFDriver
# virtual_power_host_key                         = <None>
# virtual_power_host_pass                        =
# virtual_power_host_user                        =
# virtual_power_ssh_host                         =
# virtual_power_ssh_port                         = 22
# virtual_power_type                             = virsh
-#}
{#
#-------------------------------------------------------------------------------
# Storage: Cinder
#-------------------------------------------------------------------------------
# iscsi_iqn_prefix                               = iqn.2010-10.org.openstack.baremetal
# volume_driver                                  = nova.virt.baremetal.volume_driver.LibvirtVolumeDriver
-#}
{#
#-------------------------------------------------------------------------------
# Tilera
#-------------------------------------------------------------------------------
# tile_pdu_ip                                    = 10.0.100.1
# tile_pdu_mgr                                   = /tftpboot/pdu_mgr
# tile_pdu_off                                   = 2
# tile_pdu_on                                    = 1
# tile_pdu_status                                = 9
# tile_power_wait                                = 9
-#}

[cells]
{#
# call_timeout                                   = 60
# capabilities                                   = hypervisor=xenserver;kvm,os=linux;windows
# cell_type                                      = compute
# cells_config                                   = <None>
# driver                                         = nova.cells.rpc_driver.CellsRPCDriver
# enable                                         = False
# instance_update_num_instances                  = 1
# instance_updated_at_threshold                  = 3600
# manager                                        = nova.cells.manager.CellsManager
# max_hop_count                                  = 10
# mute_child_interval                            = 300
# mute_weight_multiplier                         = -10.0
# mute_weight_value                              = 1000.0
# name                                           = nova
# offset_weight_multiplier                       = 1.0
# reserve_percent                                = 10.0
# scheduler                                      = nova.cells.scheduler.CellsScheduler
# topic                                          = cells
-#}
{#
#-------------------------------------------------------------------------------
# Database
#-------------------------------------------------------------------------------
# db_check_interval                              = 60
-#}
{#
#-------------------------------------------------------------------------------
# Quota
#-------------------------------------------------------------------------------
# bandwidth_update_interval                      = 600
-#}
{#
#-------------------------------------------------------------------------------
# RPC
#-------------------------------------------------------------------------------
# rpc_driver_queue_base                          = cells.intercell
-#}
{#
#-------------------------------------------------------------------------------
# Scheduling
#-------------------------------------------------------------------------------
# ram_weight_multiplier                          = 10.0
# scheduler_filter_classes                       = nova.cells.filters.all_filters
# scheduler_retries                              = 10
# scheduler_retry_delay                          = 2
# scheduler_weight_classes                       = nova.cells.weights.all_weighers
-#}

[conductor]
{#
# manager                                        = nova.conductor.manager.ConductorManager
# topic                                          = conductor
# use_local                                      = False
# workers                                        = <None>
-#}

[database]
{% set  connection = {} -%}
{% if   minions['mysql-server'] -%}
{% do   connection.update({'type': 'mysql'}) -%}
{% elif minions['postgresql'] -%}
{% do   connection.update({'type': 'postgresql'}) -%}
{% else -%}
{% do   connection.update({'type': 'sqlite'}) -%}
{% endif -%}
{% if minions['mariadb-server']
   or minions['mysql-server']
   or minions['postgresql'] -%}
connection                                       = {{ connection.type }}://{{ connection.username }}:{{ connection.password }}@{{ connection.hostname }}/{{ connection.database }}{% if connection.database_ssl_ca %}?ssl_ca={{ connection.database_ssl_ca }}{% if connection.database_ssl_cert %}&ssl_cert={{ database_ssl_cert }}&ssl_key={{ connection.database_ssl_key }}{% endif %}{% endif %}
{% else -%}
connection                                       = sqlite:///$state_path/nova.sqlite
{% endif -%}
{#
# backend                                        = sqlalchemy
# connection_debug                               = 0
# connection_trace                               = False
# db_inc_retry_interval                          = True
# db_max_retries                                 = 20
# db_max_retry_interval                          = 10
# db_retry_interval                              = 1
# idle_timeout                                   = 3600
# max_overflow                                   = <None>
# max_pool_size                                  = <None>
# max_retries                                    = 10
# min_pool_size                                  = 1
# mysql_sql_mode                                 = <None>
# pool_timeout                                   = <None>
# retry_interval                                 = 10
# slave_connection                               = <None>
# use_db_reconnect                               = False
-#}

[hyperv]
{#
# dynamic_memory_ratio                           = 1.0
# enable_instance_metrics_collection             = False
# force_hyperv_utils_v1                          = False
# instances_path_share                           =
# limit_cpu_features                             = False
# mounted_disk_query_retry_count                 = 10
# mounted_disk_query_retry_interval              = 5
# qemu_img_cmd                                   = qemu-img.exe
# vswitch_name                                   = <None>
-#}
{#
#-------------------------------------------------------------------------------
# Config Drive
#-------------------------------------------------------------------------------
# config_drive_cdrom                             = False
# config_drive_inject_password                   = False
-#}
{#
#-------------------------------------------------------------------------------
# Storage: Cinder
#-------------------------------------------------------------------------------
# force_volumeutils_v1                           = False
# volume_attach_retry_count                      = 10
# volume_attach_retry_interval                   = 5
-#}

[image_file_url]
{#
#-------------------------------------------------------------------------------
# Storage: Glance
#-------------------------------------------------------------------------------
# filesystems                                    =
-#}

[keymgr]
{#
# api_class                                      = nova.keymgr.conf_key_mgr.ConfKeyManager
# fixed_key                                      = <None>
-#}

[keystone_authtoken]
{% if minions['keystone'] -%}
auth_uri                                         = http://{{ minions['keystone'][0] }}:5000/
{% endif -%}
{% if minions['memcached'] -%}
memcached_servers                                = {{ minions['memcached']|join(',') }}
{% endif -%}
{#
# admin_password                                 = <None>
# admin_tenant_name                              = admin
# admin_token                                    = <None>
# admin_user                                     = <None>
# auth_admin_prefix                              =
# auth_host                                      = 127.0.0.1
# auth_port                                      = 35357
# auth_protocol                                  = https
# auth_version                                   = <None>
# cache                                          = <None>
# cafile                                         = <None>
# certfile                                       = <None>
# delay_auth_decision                            = False
# enforce_token_bind                             = permissive
# http_connect_timeout                           = <None>
# http_request_max_retries                       = 3
# include_service_catalog                        = True
# insecure                                       = False
# keyfile                                        = <None>
# memcache_secret_key                            = <None>
# memcache_security_strategy                     = <None>
# revocation_cache_time                          = 300
# signing_dir                                    = <None>
# token_cache_time                               = 300
-#}

[libvirt]
{#
# checksum_base_images                           = False
# checksum_interval_seconds                      = 3600
# connection_uri                                 =
# cpu_mode                                       = <None>
# cpu_model                                      = <None>
# disk_prefix                                    = <None>
# image_info_filename_pattern                    = $instances_path/$image_cache_subdirectory_name/%(image)s.info
# remove_unused_kernels                          = False
# remove_unused_resized_minimum_age_seconds      = 3600
# rng_dev_path                                   = <None>
# snapshots_directory                            = $instances_path/snapshots
# vif_driver                                     = nova.virt.libvirt.vif.LibvirtGenericVIFDriver
# virt_type                                      = kvm
# volume_clear                                   = zero
# volume_clear_size                              = 0
# volume_drivers                                 = iscsi=nova.virt.libvirt.volume.LibvirtISCSIVolumeDriver,iser=nova.virt.libvirt.volume.LibvirtISERVolumeDriver,local=nova.virt.libvirt.volume.LibvirtVolumeDriver,fake=nova.virt.libvirt.volume.LibvirtFakeVolumeDriver,rbd=nova.virt.libvirt.volume.LibvirtNetVolumeDriver,sheepdog=nova.virt.libvirt.volume.LibvirtNetVolumeDriver,nfs=nova.virt.libvirt.volume.LibvirtNFSVolumeDriver,aoe=nova.virt.libvirt.volume.LibvirtAOEVolumeDriver,glusterfs=nova.virt.libvirt.volume.LibvirtGlusterfsVolumeDriver,fibre_channel=nova.virt.libvirt.volume.LibvirtFibreChannelVolumeDriver,scality=nova.virt.libvirt.volume.LibvirtScalityVolumeDriver
# wait_soft_reboot_seconds                       = 120
-#}
#-------------------------------------------------------------------------------
# Compute
#-------------------------------------------------------------------------------
use_virtio_for_bridges                           = True
{#
# block_migration_flag                           = VIR_MIGRATE_UNDEFINE_SOURCE,VIR_MIGRATE_PEER2PEER,VIR_MIGRATE_NON_SHARED_INC
# disk_cachemodes                                =
# images_rbd_ceph_conf                           =
# images_rbd_pool                                = rbd
# images_type                                    = default
# images_volume_group                            = <None>
# inject_key                                     = False
# inject_partition                               = -2
# inject_password                                = False
# iscsi_use_multipath                            = False
# iser_use_multipath                             = False
# rescue_image_id                                = <None>
# rescue_kernel_id                               = <None>
# rescue_ramdisk_id                              = <None>
# snapshot_compression                           = False
# snapshot_image_format                          = <None>
# sparse_logical_volumes                         = False
# use_usb_tablet                                 = True
-#}
{#
#-------------------------------------------------------------------------------
# Compute: Xen
#-------------------------------------------------------------------------------
# xen_hvmloader_path                             = /usr/lib/xen/boot/hvmloader
-#}
{#
#-------------------------------------------------------------------------------
# Live Migration
#-------------------------------------------------------------------------------
# live_migration_bandwidth                       = 0
# live_migration_flag                            = VIR_MIGRATE_UNDEFINE_SOURCE,VIR_MIGRATE_PEER2PEER
# live_migration_uri                             = qemu+tcp://%s/system
-#}
{#
#-------------------------------------------------------------------------------
# Storage: Cinder
#-------------------------------------------------------------------------------
# glusterfs_mount_point_base                     = $state_path/mnt
# nfs_mount_options                              = <None>
# nfs_mount_point_base                           = $state_path/mnt
# num_aoe_discover_tries                         = 3
# num_iscsi_scan_tries                           = 5
# num_iser_scan_tries                            = 5
# qemu_allowed_storage_drivers                   =
# rbd_secret_uuid                                = <None>
# rbd_user                                       = <None>
# scality_sofs_config                            = <None>
# scality_sofs_mount_point                       = $state_path/scality
-#}

[matchmaker_redis]
{% if minions['redis-server'] -%}
host                                             = {{ minions['redis-server'][0] }}
# password                                       = <None>
# port                                           = 6379
{% endif -%}

[matchmaker_ring]
{#
#-------------------------------------------------------------------------------
# RPC
#-------------------------------------------------------------------------------
# ringfile                                       = /etc/oslo/matchmaker_ring.json
-#}

[metrics]
{#
#-------------------------------------------------------------------------------
# Scheduling
#-------------------------------------------------------------------------------
# required                                       = True
# weight_multiplier                              = 1.0
# weight_of_unavailable                          = -10000.0
# weight_setting                                 =
-#}

[osapi_v3]
{#
#-------------------------------------------------------------------------------
# APIv3
#-------------------------------------------------------------------------------
# enabled                                        = False
# extensions_blacklist                           =
# extensions_whitelist                           =
-#}

[rdp]
{#
# enabled                                        = False
# html5_proxy_base_url                           = http://127.0.0.1:6083/
-#}

[spice]
{% if minions['nova-spiceproxy'] -%}
html5proxy_base_url                              = http://{{ minions['nova-spiceproxy'][0] }}:6082/spice_auto.html
{% endif -%}
{#
# agent_enabled                                  = True
# enabled                                        = False
# keymap                                         = en-us
# server_listen                                  = 127.0.0.1
# server_proxyclient_address                     = 127.0.0.1
-#}

[ssl]
{#
#-------------------------------------------------------------------------------
# Certificate Authority
#-------------------------------------------------------------------------------
# ca_file                                        = <None>
# cert_file                                      = <None>
# key_file                                       = <None>
-#}

[trusted_computing]
{#
#-------------------------------------------------------------------------------
# Attestation
#-------------------------------------------------------------------------------
# attestation_api_url                            = /OpenAttestationWebServices/V1.0
# attestation_auth_blob                          = <None>
# attestation_auth_timeout                       = 60
# attestation_port                               = 8443
# attestation_server                             = <None>
# attestation_server_ca_file                     = <None>
-#}

[upgrade_levels]
{#
# cells                                          = <None>
# cert                                           = <None>
# compute                                        = <None>
# conductor                                      = <None>
# console                                        = <None>
# consoleauth                                    = <None>
# intercell                                      = <None>
# network                                        = <None>
# scheduler                                      = <None>
-#}
{#
#-------------------------------------------------------------------------------
# RPC
#-------------------------------------------------------------------------------
# baseapi                                        = <None>
-#}

[vmware]
{#
# api_retry_count                                = 10
# cluster_name                                   = <None>
# datastore_regex                                = <None>
# host_ip                                        = <None>
# host_password                                  = <None>
# host_username                                  = <None>
# integration_bridge                             = br-int
# maximum_objects                                = 100
# task_poll_interval                             = 0.5
# use_linked_clone                               = True
# wsdl_location                                  = <None>
-#}
{#
#-------------------------------------------------------------------------------
# Console: VNC
#-------------------------------------------------------------------------------
# vnc_port                                       = 5900
# vnc_port_total                                 = 10000
-#}
{#
#-------------------------------------------------------------------------------
# Network
#-------------------------------------------------------------------------------
# vlan_interface                                 = vmnic0
-#}

[xenserver]
{#
#-------------------------------------------------------------------------------
# Compute: Baremetal
#-------------------------------------------------------------------------------
# vif_driver                                     = nova.virt.xenapi.vif.XenAPIBridgeDriver
-#}
{#
#-------------------------------------------------------------------------------
# Compute: Xen
#-------------------------------------------------------------------------------
# agent_path                                     = /usr/sbin/xe-update-networking
# agent_resetnetwork_timeout                     = 60
# agent_timeout                                  = 30
# agent_version_timeout                          = 300
# cache_images                                   = all
# check_host                                     = True
# connection_concurrent                          = 5
# connection_password                            = <None>
# connection_url                                 = <None>
# connection_username                            = root
# default_os_type                                = linux
# disable_agent                                  = False
# image_compression_level                        = <None>
# image_upload_handler                           = nova.virt.xenapi.image.glance.GlanceStore
# introduce_vdi_retry_wait                       = 20
# ipxe_boot_menu_url                             = <None>
# ipxe_mkisofs_cmd                               = mkisofs
# ipxe_network_name                              = <None>
# iqn_prefix                                     = iqn.2010-10.org.openstack
# login_timeout                                  = 10
# max_kernel_ramdisk_size                        = 16777216
# num_vbd_unplug_retries                         = 10
# ovs_integration_bridge                         = xapi1
# remap_vbd_dev                                  = False
# remap_vbd_dev_prefix                           = sd
# running_timeout                                = 60
# sparse_copy                                    = True
# sr_base_path                                   = /var/run/sr-mount
# sr_matching_filter                             = default-sr:true
# target_host                                    = <None>
# target_port                                    = 3260
# torrent_base_url                               = <None>
# torrent_download_stall_cutoff                  = 600
# torrent_images                                 = none
# torrent_listen_port_end                        = 6891
# torrent_listen_port_start                      = 6881
# torrent_max_last_accessed                      = 86400
# torrent_max_seeder_processes_per_host          = 1
# torrent_seed_chance                            = 1.0
# torrent_seed_duration                          = 3600
# use_agent_default                              = False
# use_join_force                                 = True
# vhd_coalesce_max_attempts                      = 20
# vhd_coalesce_poll_interval                     = 5.0
-#}
{#
#-------------------------------------------------------------------------------
# Storage: Cinder
#-------------------------------------------------------------------------------
# block_device_creation_timeout                  = 10
-#}

[zookeeper]
{#
# address                                        = <None>
# recv_timeout                                   = 4000
# sg_prefix                                      = /servicegroups
# sg_retry_interval                              = 5
-#}
