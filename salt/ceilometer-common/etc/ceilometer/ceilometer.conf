#  vi: set ft=ini.jinja :

{% set roles = [] -%}
{% do  roles.append('keystone') -%}
{% do  roles.append('mariadb-server') -%}
{% do  roles.append('memcached') -%}
{% do  roles.append('mysql-server') -%}
{% do  roles.append('nova-compute-docker') -%}
{% do  roles.append('nova-compute-kvm') -%}
{% do  roles.append('nova-compute-lxc') -%}
{% do  roles.append('nova-compute-qemu') -%}
{% do  roles.append('nova-compute-xen') -%}
{% do  roles.append('postgresql') -%}
{% do  roles.append('qpidd') -%}
{% do  roles.append('rabbitmq-server') -%}
{% do  roles.append('redis-server') -%}
{% set minions = salt['roles.list_minions'](roles) -%}

[DEFAULT]
#-------------------------------------------------------------------------------
# API
#-------------------------------------------------------------------------------
# enable_v1_api                                  = True
# max_request_body_size                          = 114688
# pipeline_cfg_file                              = pipeline.yaml
# reserved_metadata_length                       = 256
# reserved_metadata_namespace                    = metering.
#-------------------------------------------------------------------------------
# Authentication and Authorization
#-------------------------------------------------------------------------------
{% if minions['keystone'] -%}
auth_strategy                                    = keystone
{% else -%}
auth_strategy                                    = noauth
{% endif -%}
#-------------------------------------------------------------------------------
# Collector
#-------------------------------------------------------------------------------
{% if   minions['mysql-server'] -%}
collector_workers                                = {{ salt['config.get']('num_cpus') }}
{% elif minions['postgresql'] -%}
collector_workers                                = 1
{% endif -%}
#-------------------------------------------------------------------------------
# Common
#-------------------------------------------------------------------------------
host                                             = {{ salt['config.get']('fqdn') }}
# disable_process_locking                        = False
# lock_path                                      = <None>
#-------------------------------------------------------------------------------
# Database
#-------------------------------------------------------------------------------
sqlite_db                                        = ceilometer.sqlite
# database_connection                            = <None>
# mysql_engine                                   = InnoDB
# sqlite_synchronous                             = True
#-------------------------------------------------------------------------------
# Exchange
#-------------------------------------------------------------------------------
# cinder_control_exchange                        = cinder
# control_exchange                               = openstack
# default_publisher_id                           = <None>
# glance_control_exchange                        = glance
# heat_control_exchange                          = heat
# http_control_exchanges                         = cinder
# http_control_exchanges                         = glance
# http_control_exchanges                         = neutron
# http_control_exchanges                         = nova
# neutron_control_exchange                       = neutron
# nova_control_exchange                          = nova
# sample_source                                  = openstack
#-------------------------------------------------------------------------------
# Inspector
#-------------------------------------------------------------------------------
{% if   minions['nova-compute-docker']
   or   minions['nova-compute-kvm']
   or   minions['nova-compute-lxc']
   or   minions['nova-compute-qemu']
   or   minions['nova-compute-xen'] -%}
hypervisor_inspector                             = libvirt
{% endif -%}
{% if   minions['nova-compute-docker'] -%}
libvirt_type                                     = lxc
{% elif minions['nova-compute-kvm'] -%}
libvirt_type                                     = kvm
{% elif minions['nova-compute-lxc'] -%}
libvirt_type                                     = lxc
{% elif minions['nova-compute-qemu'] -%}
libvirt_type                                     = qemu
{% elif minions['nova-compute-xen'] -%}
libvirt_type                                     = xen
{% endif -%}
# libvirt_uri                                    =
#-------------------------------------------------------------------------------
# Logging
#-------------------------------------------------------------------------------
# debug                                          = False
# default_log_levels                             = amqp=WARN,amqplib=WARN,boto=WARN,qpid=WARN,sqlalchemy=WARN,suds=INFO,iso8601=WARN,requests.packages.urllib3.connectionpool=WARN
# default_notification_level                     = INFO
# fatal_deprecations                             = False
# instance_format                                = "[instance: %(uuid)s] "
# instance_uuid_format                           = "[instance: %(uuid)s] "
# log_config_append                              = <None>
# log_date_format                                = %Y-%m-%d %H:%M:%S
# log_dir                                        = <None>
# log_file                                       = <None>
# logging_context_format_string                  = %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [%(request_id)s %(user_identity)s] %(instance)s%(message)s
# logging_debug_format_suffix                    = %(funcName)s %(pathname)s:%(lineno)d
# logging_default_format_string                  = %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [-] %(instance)s%(message)s
# logging_exception_prefix                       = %(asctime)s.%(msecs)03d %(process)d TRACE %(name)s %(instance)s
# publish_errors                                 = False
# syslog_log_facility                            = LOG_USER
# use_stderr                                     = True
# use_syslog                                     = False
# use_syslog_rfc_format                          = False
# verbose                                        = False
#-------------------------------------------------------------------------------
# Policy
#-------------------------------------------------------------------------------
# policy_default_rule                            = default
# policy_file                                    = policy.json
#-------------------------------------------------------------------------------
# RPC
#-------------------------------------------------------------------------------
{% if   minions['rabbitmq-server'] -%}
rpc_backend                                      = ceilometer.openstack.common.rpc.impl_kombu
notification_driver                              = rabbit
{% elif minions['qpidd'] -%}
rpc_backend                                      = ceilometer.openstack.common.rpc.impl_qpid
notification_driver                              = qpid
{% else -%}
rpc_backend                                      = ceilometer.openstack.common.rpc.impl_zmq
notification_driver                              = noop
{% endif -%}
{#
# allowed_rpc_exception_modules                  = oslo.messaging.exceptions,nova.exception,cinder.exception,exceptions
# amqp_auto_delete                               = False
# amqp_durable_queues                            = False
# default_notification_level                     = INFO
# default_timeout                                = 20
# dispatcher                                     = database
# fake_rabbit                                    = False
# kombu_reconnect_delay                          = 1.0
# kombu_ssl_ca_certs                             =
# kombu_ssl_certfile                             =
# kombu_ssl_keyfile                              =
# kombu_ssl_version                              =
# matchmaker_heartbeat_freq                      = 300
# matchmaker_heartbeat_ttl                       = 600
# notification_topics                            = notifications
# notification_workers                           = 1
# onready                                        = <None>
# publish_errors                                 = False
# rpc_cast_timeout                               = 30
# rpc_conn_pool_size                             = 30
# rpc_response_timeout                           = 60
# rpc_thread_pool_size                           = 64
# transport_url                                  = <None>
# volume_topic                                   = cinder-volume
-#}
{% if   minions['rabbitmq-server'] -%}
#-------------------------------------------------------------------------------
# RPC: RabbitMQ
#-------------------------------------------------------------------------------
{% if   minions['rabbitmq-server']|count > 1 -%}
{% set socks = [] -%}
{% for minion in minions['rabbitmq-server'] -%}
{% do  socks.append(minion + ':5672') -%}
{% endfor -%}
rabbit_hosts                                     = {{ socks|join(',') }}
{% else -%}
rabbit_host                                      = {{ minions['rabbitmq-server'][0] }}
{% endif -%}
rabbit_password                                  = ceilometer
rabbit_userid                                    = ceilometer
rabbit_virtual_host                              = /ceilometer
# rabbit_ha_queues                               = False
# rabbit_login_method                            = AMQPLAIN
# rabbit_max_retries                             = 0
# rabbit_port                                    = 5672
# rabbit_retry_backoff                           = 2
# rabbit_retry_interval                          = 1
# rabbit_use_ssl                                 = False
{% elif minions['qpidd'] -%}
#-------------------------------------------------------------------------------
# RPC: Qpidd
#-------------------------------------------------------------------------------
{% if   minions['qpidd']|count > 1 -%}
{% set socks = [] -%}
{% for minion in minions['qpidd'] -%}
{% do  socks.append(minion + ':5672') -%}
{% endfor -%}
qpid_hosts                                       = {{ socks|join(',') }}
{% else -%}
qpid_hostname                                    = {{ minions['qpidd'][0] }}
{% endif -%}
# qpid_heartbeat                                 = 60
# qpid_password                                  =
# qpid_port                                      = 5672
# qpid_protocol                                  = tcp
# qpid_sasl_mechanisms                           =
# qpid_tcp_nodelay                               = True
# qpid_topology_version                          = 1
# qpid_username                                  =
{% else -%}
#-------------------------------------------------------------------------------
# RPC: ZeroMQ
#-------------------------------------------------------------------------------
rpc_zmq_host                                     = {{ salt['config.get']('fqdn') }}
# rpc_zmq_bind_address                           = *
# rpc_zmq_contexts                               = 1
# rpc_zmq_ipc_dir                                = /var/run/openstack
# rpc_zmq_matchmaker                             = oslo.messaging._drivers.matchmaker.MatchMakerLocalhost
# rpc_zmq_port                                   = 9501
# rpc_zmq_topic_backlog                          = <None>
{% endif -%}
#-------------------------------------------------------------------------------
# Storage: Swift
#-------------------------------------------------------------------------------
# reseller_prefix                                = AUTH_
#-------------------------------------------------------------------------------
# Testing
#-------------------------------------------------------------------------------
# backdoor_port                                  = <None>

[alarm]
# evaluation_interval                            = 60
# evaluation_service                             = ceilometer.alarm.service.SingletonAlarmService
# notifier_rpc_topic                             = alarm_notifier
# partition_rpc_topic                            = alarm_partition_coordination
# record_history                                 = True
# rest_notifier_certificate_file                 =
# rest_notifier_certificate_key                  =
# rest_notifier_ssl_verify                       = True

[api]
# host                                           = 0.0.0.0
# port                                           = 8777

[audit]
# api_audit_map                                  = api_audit_map.conf
# namespace                                      = openstack

[cells]
# bandwidth_update_interval                      = 600
# call_timeout                                   = 60
# capabilities                                   = hypervisor=xenserver;kvm,os=linux;windows
# cell_type                                      = compute

[collector]
# udp_address                                    = 0.0.0.0
# udp_port                                       = 4952

[database]
{% set  connection = {} -%}
{% if   minions['mysql-server'] -%}
{% do   connection.update({'type': 'mysql'}) -%}
{% elif minions['postgresql'] -%}
{% do   connection.update({'type': 'postgresql'}) -%}
{% else -%}
{% do   connection.update({'type': 'sqlite'}) -%}
{% endif -%}
{% if minions['mariadb-server']
   or minions['mysql-server']
   or minions['postgresql'] -%}
connection                                       = {{ connection.type }}://{{ connection.username }}:{{ connection.password }}@{{ conenction.hostname }}/{{ connection.database }}{% if connection.database_ssl_ca %}?ssl_ca={{ connection.database_ssl_ca }}{% if connection.database_ssl_cert %}&ssl_cert={{ database_ssl_cert }}&ssl_key={{ connection.database_ssl_key }}{% endif %}{% endif %}
{% else -%}
connection                                       = sqlite:////var/lib/ceilometer/$sqlite_db
{% endif -%}
# backend                                        = sqlalchemy
# connection_debug                               = 0
# connection_trace                               = False
# idle_timeout                                   = 3600
# max_overflow                                   = <None>
# max_pool_size                                  = <None>
# max_retries                                    = 10
# min_pool_size                                  = 1
# pool_timeout                                   = <None>
# retry_interval                                 = 10
# slave_connection                               =
# time_to_live                                   = -1

[dispatcher_file]
# backup_count                                   = 0
# file_path                                      = <None>
# max_bytes                                      = 0

[event]
# definitions_cfg_file                           = event_definitions.yaml
# drop_unmatched_notifications                   = False

[keystone_authtoken]
{% if minions['keystone'] -%}
auth_uri                                         = http://{{ minions['keystone'][0] }}:5000/
{% endif -%}
{% if minions['memcached'] -%}
memcached_servers                                = {{ minions['memcached']|join(',') }}
{% endif -%}
{#
# admin_password                                 = <None>
# admin_tenant_name                              = admin
# admin_token                                    = <None>
# admin_user                                     = <None>
# auth_admin_prefix                              =
# auth_host                                      = 127.0.0.1
# auth_port                                      = 35357
# auth_protocol                                  = https
# auth_version                                   = <None>
# cache                                          = <None>
# cafile                                         = <None>
# certfile                                       = <None>
# delay_auth_decision                            = False
# enforce_token_bind                             = permissive
# http_connect_timeout                           = <None>
# http_request_max_retries                       = 3
# identity_uri                                   = <None>
# include_service_catalog                        = True
# insecure                                       = False
# keyfile                                        = <None>
# memcache_secret_key                            = <None>
# memcache_security_strategy                     = <None>
# revocation_cache_time                          = 300
# signing_dir                                    = <None>
# token_cache_time                               = 300
-#}

[matchmaker_redis]
{% if minions['redis-server'] -%}
host                                             = {{ minions['redis-server'][0] }}
# password                                       = <None>
# port                                           = 6379
{% endif -%}

[matchmaker_ring]
# ringfile                                       = /etc/oslo/matchmaker_ring.json

[notification]
# ack_on_event_error                             = True
# store_events                                   = False

[publisher]
# metering_secret                                = change this or be hacked

[publisher_rpc]
# metering_topic                                 = metering

[rpc_notifier2]
# topics                                         = notifications

[service_credentials]
{% if minions['keystone'] -%}
os_auth_url                                      = http://{{ minions['keystone'][0] }}:5000/v2.0
# insecure                                       = False
# os_cacert                                      = <None>
# os_endpoint_type                               = publicURL
# os_password                                    = admin
# os_region_name                                 = <None>
# os_tenant_id                                   =
# os_tenant_name                                 = admin
# os_username                                    = ceilometer
{% endif -%}

[ssl]
# ca_file                                        = <None>
# cert_file                                      = <None>
# key_file                                       = <None>

[vmware]
# api_retry_count                                = 10
# host_ip                                        =
# host_password                                  =
# host_username                                  =
# task_poll_interval                             = 0.5
