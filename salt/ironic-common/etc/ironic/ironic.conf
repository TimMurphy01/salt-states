# vi: set ft=ini.jinja :

{% set ipv4  = salt['config.get']('fqdn_ip4') -%}
{% set roles = [] -%}
{% do  roles.append('glance-api') -%}
{% do  roles.append('keystone') -%}
{% do  roles.append('mariadb-server') -%}
{% do  roles.append('memcached') -%}
{% do  roles.append('mysql-server') -%}
{% do  roles.append('neutron-server') -%}
{% do  roles.append('postgresql') -%}
{% do  roles.append('qpidd') -%}
{% do  roles.append('rabbitmq-server') -%}
{% do  roles.append('redis-server') -%}
{% set minions = salt['roles.dict'](roles) -%}

[DEFAULT]
{#
#-------------------------------------------------------------------------------
# API
#-------------------------------------------------------------------------------
# hash_distribution_replicas                     = 1
# hash_partition_exponent                        = 16
-#}
#-------------------------------------------------------------------------------
# Authentication and Authorization
#-------------------------------------------------------------------------------
{% if minions['keystone'] -%}
auth_strategy                                    = keystone
{% else -%}
auth_strategy                                    = noauth
{% endif -%}
#-------------------------------------------------------------------------------
# Common
#-------------------------------------------------------------------------------
my_ip                                            = {{ ipv4[0] }}
host                                             = {{ salt['config.get']('fqdn') }}
{#
# bindir                                         = $pybasedir/bin
# disable_process_locking                        = False
# lock_path                                      = <None>
# pybasedir                                      = /usr/lib/python/site-packages/ironic
# rootwrap_config                                = /etc/ironic/rootwrap.conf
# tempdir                                        = <None>
-#}
{#
#-------------------------------------------------------------------------------
# Compute
#-------------------------------------------------------------------------------
# force_raw_images                               = True
# default_publisher_id                           = <None>
-#}
#-------------------------------------------------------------------------------
# Logging
#-------------------------------------------------------------------------------
log_dir                                          = /var/log/ironic/
{#
# debug                                          = False
# default_log_levels                             = amqp=WARN,amqplib=WARN,boto=WARN,keystone=INFO,qpid=WARN,sqlalchemy=WARN,suds=INFO,iso8601=WARN
# default_notification_level                     = INFO
# fatal_deprecations                             = False
# fatal_exception_format_errors                  = False
# instance_format                                = "[instance: %(uuid)s] "
# instance_uuid_format                           = "[instance: %(uuid)s] "
# log_config_append                              = <None>
# log_date_format                                = %Y-%m-%d %H:%M:%S
# log_file                                       = <None>
# logging_context_format_string                  = %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [%(request_id)s %(user)s %(tenant)s] %(instance)s%(message)s
# logging_debug_format_suffix                    = %(funcName)s %(pathname)s:%(lineno)d
# logging_default_format_string                  = %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [-] %(instance)s%(message)s
# logging_exception_prefix                       = %(asctime)s.%(msecs)03d %(process)d TRACE %(name)s %(instance)s
# publish_errors                                 = False
# syslog_log_facility                            = LOG_USER
# use_stderr                                     = True
# use_syslog                                     = False
# verbose                                        = False
-#}
{#
#-------------------------------------------------------------------------------
# Network: IPv6
#-------------------------------------------------------------------------------
# use_ipv6                                       = False
-#}
{#
#-------------------------------------------------------------------------------
# Periodic
#-------------------------------------------------------------------------------
# run_external_periodic_tasks                    = True
-#}
{#
#-------------------------------------------------------------------------------
# Policy
#-------------------------------------------------------------------------------
# policy_default_rule                            = default
# policy_file                                    = policy.json
-#}
#-------------------------------------------------------------------------------
# RPC
#-------------------------------------------------------------------------------
{% if   minions['rabbitmq-server'] -%}
rpc_backend                                      = ironic.openstack.common.rpc.impl_kombu
notification_driver                              = rabbit
{% elif minions['qpidd'] -%}
rpc_backend                                      = ironic.openstack.common.rpc.impl_qpid
notification_driver                              = qpid
{% else -%}
rpc_backend                                      = ironic.openstack.common.rpc.impl_zmq
notification_driver                              = noop
{% endif -%}
{#
# amqp_auto_delete                               = False
# amqp_durable_queues                            = False
# control_exchange                               = openstack
# kombu_ssl_version                              =
# kombu_ssl_keyfile                              =
# kombu_ssl_certfile                             =
# kombu_ssl_ca_certs                             =
# matchmaker_heartbeat_freq                      = 300
# matchmaker_heartbeat_ttl                       = 600
# notification_topics                            = notifications
# rpc_cast_timeout                               = 30
# rpc_conn_pool_size                             = 30
# rpc_response_timeout                           = 60
# rpc_thread_pool_size                           = 64
-#}
{% if   minions['rabbitmq-server'] -%}
#-------------------------------------------------------------------------------
# RPC: RabbitMQ
#-------------------------------------------------------------------------------
{% if   minions['rabbitmq-server']|count > 1 -%}
{% set socks = [] -%}
{% for minion in minions['rabbitmq-server'] -%}
{% do  socks.append(minion + ':5672') -%}
{% endfor -%}
rabbit_hosts                                     = {{ socks|join(',') }}
{% else -%}
rabbit_host                                      = {{ minions['rabbitmq-server'][0] }}
{% endif -%}
rabbit_password                                  = nova
rabbit_userid                                    = nova
rabbit_virtual_host                              = /nova
# rabbit_ha_queues                               = False
# rabbit_login_method                            = AMQPLAIN
# rabbit_max_retries                             = 0
# rabbit_port                                    = 5672
# rabbit_retry_backoff                           = 2
# rabbit_retry_interval                          = 1
# rabbit_use_ssl                                 = False
{% elif minions['qpidd'] -%}
#-------------------------------------------------------------------------------
# RPC: Qpidd
#-------------------------------------------------------------------------------
{% if   minions['qpidd']|count > 1 -%}
{% set socks = [] -%}
{% for minion in minions['qpidd'] -%}
{% do  socks.append(minion + ':5672') -%}
{% endfor -%}
qpid_hosts                                       = {{ socks|join(',') }}
{% else -%}
qpid_hostname                                    = {{ minions['qpidd'][0] }}
{% endif -%}
# qpid_heartbeat                                 = 60
# qpid_password                                  =
# qpid_port                                      = 5672
# qpid_protocol                                  = tcp
# qpid_sasl_mechanisms                           =
# qpid_tcp_nodelay                               = True
# qpid_topology_version                          = 1
# qpid_username                                  =
{% else -%}
#-------------------------------------------------------------------------------
# RPC: ZeroMQ
#-------------------------------------------------------------------------------
rpc_zmq_host                                     = {{ salt['config.get']('fqdn') }}
# rpc_zmq_bind_address                           = *
# rpc_zmq_contexts                               = 1
# rpc_zmq_ipc_dir                                = /var/run/openstack
# rpc_zmq_matchmaker                             = oslo.messaging._drivers.matchmaker.MatchMakerLocalhost
# rpc_zmq_port                                   = 9501
# rpc_zmq_topic_backlog                          = <None>
{% endif -%}
{#
#-------------------------------------------------------------------------------
# Testing
#-------------------------------------------------------------------------------
# allowed_rpc_exception_modules                  = nova.exception,cinder.exception,exceptions
# backdoor_port                                  = <None>
# fake_rabbit                                    = False
-#}

[api]
{#
# host_ip                                        = 0.0.0.0
# max_limit                                      = 1000
# port                                           = 6385
-#}

[conductor]
{#
# api_url                                        = <None>
# check_provision_state_interval                 = 60
# deploy_callback_timeout                        = 1800
# force_power_state_during_sync                  = True
# heartbeat_interval                             = 10
# heartbeat_timeout                              = 60
# power_state_sync_max_retries                   = 3
# sync_power_state_interval                      = 60
-#}

[database]
{% set  connection = {} -%}
{% if   minions['mysql-server'] -%}
{% do   connection.update({'type': 'mysql'}) -%}
{% elif minions['postgresql'] -%}
{% do   connection.update({'type': 'postgresql'}) -%}
{% else -%}
{% do   connection.update({'type': 'sqlite'}) -%}
{% endif -%}
{% if minions['mariadb-server']
   or minions['mysql-server']
   or minions['postgresql'] -%}
connection                                       = {{ connection.type }}://{{ connection.username }}:{{ connection.password }}@{{ connection.hostname }}/{{ connection.database }}{% if connection.database_ssl_ca %}?ssl_ca={{ connection.database_ssl_ca }}{% if connection.database_ssl_cert %}&ssl_cert={{ database_ssl_cert }}&ssl_key={{ connection.database_ssl_key }}{% endif %}{% endif %}
{% else -%}
connection                                       = sqlite:///var/lib/ironic/ironic.sqlite
{% endif -%}
{#
# backend                                        = sqlalchemy
# connection_debug                               = 0
# connection_trace                               = False
# db_inc_retry_interval                          = True
# db_max_retries                                 = 20
# db_max_retry_interval                          = 10
# db_retry_interval                              = 1
# idle_timeout                                   = 3600
# max_overflow                                   = <None>
# max_pool_size                                  = <None>
# max_retries                                    = 10
# min_pool_size                                  = 1
# mysql_sql_mode                                 = <None>
# pool_timeout                                   = <None>
# retry_interval                                 = 10
# slave_connection                               = <None>
# use_db_reconnect                               = False
-#}

[glance]
{% if minions['glance-api'] -%}
{% if minions['keystone'] -%}
auth_strategy                                    = keystone
{% else -%}
auth_strategy                                    = noauth
{% endif -%}
{% if  minions['glance-api']|count > 1 -%}
{% set socks = [] -%}
{% for minion in minions['glance-api'] -%}
{% do  socks.append(minion + ':9292') -%}
{% endfor -%}
glance_api_servers                               = {{ socks|join(',') }}
{% else -%}
glance_host                                      = {{ minions['glance-api'][0] }}
{% endif -%}
# allowed_direct_url_schemes                     =
# glance_api_insecure                            = False
# glance_num_retries                             = 0
# glance_port                                    = 9292
# glance_protocol                                = http
{% endif -%}

[ipmi]
{#
# retry_timeout                                  = 60
-#}

[keystone_authtoken]
{% if minions['keystone'] -%}
auth_uri                                         = http://{{ minions['keystone'][0] }}:5000/
{% endif -%}
{% if minions['memcached'] -%}
memcached_servers                                = {{ minions['memcached']|join(',') }}
{% endif -%}
{#
# admin_password                                 = <None>
# admin_tenant_name                              = admin
# admin_token                                    = <None>
# admin_user                                     = <None>
# auth_admin_prefix                              =
# auth_host                                      = 127.0.0.1
# auth_port                                      = 35357
# auth_protocol                                  = https
# auth_version                                   = <None>
# cache                                          = <None>
# cafile                                         = <None>
# certfile                                       = <None>
# delay_auth_decision                            = False
# enforce_token_bind                             = permissive
# http_connect_timeout                           = <None>
# http_request_max_retries                       = 3
# include_service_catalog                        = True
# insecure                                       = False
# keyfile                                        = <None>
# memcache_secret_key                            = <None>
# memcache_security_strategy                     = <None>
# revocation_cache_time                          = 300
# signing_dir                                    = <None>
# token_cache_time                               = 300
-#}

[matchmaker_redis]
{% if minions['redis-server'] -%}
host                                             = {{ minions['redis-server'][0] }}
# port                                           = 6379
# password                                       = <None>
{% endif -%}

[matchmaker_ring]
{#
# ringfile                                       = /etc/oslo/matchmaker_ring.json
-#}

[neutron]
{% if minions['neutron-server'] -%}
url                                              = http://{{ minions['neutron-server'][0] }}:9696
# url_timeout                                    = 30
{% endif -%}

[pxe]
{#
# images_path                                    = /var/lib/ironic/images/
# instance_master_path                           = /var/lib/ironic/master_images
# pxe_append_params                              = nofb nomodeset vga=normal
# pxe_bootfile_name                              = pxelinux.0
# pxe_config_template                            = $pybasedir/drivers/modules/pxe_config.template
# tftp_master_path                               = /tftpboot/master_images
# tftp_root                                      = /tftpboot
# tftp_server                                    = $my_ip
-#}

[rpc_notifier2]
{#
# topics                                         = notifications
-#}

[seamicro]
{#
# action_timeout                                 = 10
# max_retry                                      = 3
-#}

[ssh]
{#
# libvirt_uri                                    = qemu:///system
-#}

[ssl]
{#
# ca_file                                        = <None>
# cert_file                                      = <None>
# key_file                                       = <None>
-#}
